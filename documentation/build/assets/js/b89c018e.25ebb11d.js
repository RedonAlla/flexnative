"use strict";(self.webpackChunk_flexnative_framework_docks_3=self.webpackChunk_flexnative_framework_docks_3||[]).push([[5189],{38761:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var n=t(74848),o=t(28453),a=t(49489),l=t(7227);const s={sidebar_position:5,title:"Example",last_update:{date:new Date("2024-09-24T00:00:00.000Z"),author:"Redon Alla"},tags:["react","react-native","expo","framework","component"]},i=void 0,c={id:"theme/examples",title:"Example",description:"Below example shows a full example how to extend ThemeProvider and implement setColorScheme method to support to dark mode",source:"@site/docs/theme/examples.mdx",sourceDirName:"theme",slug:"/theme/examples",permalink:"/flexnative/docs/theme/examples",draft:!1,unlisted:!1,editUrl:"https://github.com/RedonAlla/flexnative/documentation/edit/main/docs/theme/examples.mdx",tags:[{inline:!1,label:"React",permalink:"/flexnative/docs/tags/react",description:"The library for web and native user interfaces."},{inline:!1,label:"React Native",permalink:"/flexnative/docs/tags/react-native",description:"Create native apps for Android, iOS, and more using React"},{inline:!1,label:"Expo",permalink:"/flexnative/docs/tags/expo",description:"Create universal native apps with React that run on Android, iOS, and the web. Iterate with confidence."},{inline:!1,label:"Framework",permalink:"/flexnative/docs/tags/framework",description:"FlexNative is a component library that enables developers to build universal design systems. It is built on top of React Native, allowing you to develop apps for Android, iOS, and the Web."},{inline:!1,label:"Component",permalink:"/flexnative/docs/tags/component",description:"Create user interfaces from components."}],version:"current",lastUpdatedAt:1727136e6,sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Example",last_update:{date:"2024-09-24T00:00:00.000Z",author:"Redon Alla"},tags:["react","react-native","expo","framework","component"]},sidebar:"componentsSidebar",previous:{title:"Extra Theme Colors",permalink:"/flexnative/docs/theme/extend-theme"},next:{title:"Components",permalink:"/flexnative/docs/components/"}},m={},h=[];function u(e){const r={a:"a",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(r.p,{children:["Below example shows a full example how to extend ",(0,n.jsx)(r.strong,{children:"ThemeProvider"})," and implement ",(0,n.jsx)(r.code,{children:"setColorScheme"})," method to support to dark mode\r\nand using multiple themes."]}),"\n",(0,n.jsxs)(r.p,{children:["To support multipe themes you must extend ",(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.a,{href:"/docs/getting-started/setup-@flexnative/theme-provider#using-themeprovider",children:"ThemeProvider"})}),"\r\nand implement ",(0,n.jsx)(r.code,{children:"onChangeTheme"})," method or you can create you own ",(0,n.jsx)(r.em,{children:"ThemeContext"}),"."]}),"\n",(0,n.jsxs)(a.A,{children:[(0,n.jsx)(l.A,{value:"colors-file",label:"colors",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-jsx",metastring:'title="/src/theme/colors.ts" showLineNumbers',children:"import { ColorValue } from 'react-native';\r\nimport { light, BaseTheme } from '@flexnative/theme-context';\r\n\r\nexport interface MyColorsColors {\r\n  color1: ColorValue,\r\n  color2: ColorValue\r\n};\r\n\r\nexport const lightRedTheme: BaseTheme<MyColorsColors> = {\r\n  ...light,\r\n  primary: '#FF0000',\r\n  color1: '#C51162',\r\n  color2: '#7B1FA2',\r\n}\r\n\r\nexport const lightBlueTheme: BaseTheme<MyColorsColors> = {\r\n  ...light,\r\n  primary: '#00008B',\r\n  color1: '#C51162',\r\n  color2: '#7B1FA2',\r\n}\r\n\r\nexport const darkRedTheme: BaseTheme<MyColorsColors> = {\r\n  ...dark,\r\n  primary: '#FF0000',\r\n  color1: '#C51162',\r\n  color2: '#7B1FA2',\r\n}\r\n\r\nexport const darkBlueTheme: BaseTheme<MyColorsColors> = {\r\n  ...dark,\r\n  primary: '#00008B',\r\n  color1: '#C51162',\r\n  color2: '#7B1FA2',\r\n}\n"})})}),(0,n.jsx)(l.A,{value:"themprovider-file",label:"MyThemeProvider",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-jsx",metastring:'title="/src/theme/MyThemeProvider.tsx" showLineNumbers',children:"import React from 'react';\r\nimport { ColorSchemeName, Appearance } from 'react-native';\r\n\r\n// highlight-start\r\nimport { ThemeProvider } from '@flexnative/theme-context';\r\n// highlight-end\r\nimport { MyColorsColors } from './colors';\r\n\r\n\r\nexport default class MyThemeProvider extends ThemeProvider<MyColorsColors> {\r\n  // Here you can implement your logic to get inital theme\r\n  // if you are storing your theme in persistent memory (db or local storage).\r\n  async onLoad(): Promise<void> {\r\n    const appThemeStorage = await Storage.getItem(APP_THEME, defaultTheme);\r\n    Appearance.addChangeListener(this.onAppearanceChange);\r\n\r\n    this.setState({\r\n      colorScheme: appThemeStorage.colorScheme,\r\n      colors: getThemeColors(appThemeStorage.primaryColor, appThemeStorage.colorScheme)\r\n    });\r\n  }\r\n\r\n  onAppearanceChange = (colorScheme: Appearance.AppearancePreferences) => {\r\n    if(this.state.colorScheme === null) {\r\n      this.setState({ ...this.state });\r\n    }\r\n    else {\r\n      this.setState({\r\n        colorScheme: colorScheme.colorScheme,\r\n        colors: getThemeColors(this.state.colors.primary, colorScheme.colorScheme)\r\n      });\r\n    }\r\n  }\r\n\r\n  onChangeTheme = async (theme: BaseTheme): Promise<void> => {\r\n    await Storage.saveItem(APP_THEME, { colorScheme: this.state.colorScheme, primaryColor: theme.primary });\r\n    this.setState({ colors: theme });\r\n  }\r\n\r\n  onChangeColorSchemeTheme = async (colorScheme: ColorSchemeName): Promise<void>  => {\r\n    await Storage.saveItem(APP_THEME, { colorScheme: colorScheme, primaryColor: this.state.colors.primary });\r\n\r\n    this.setState({\r\n      colorScheme: colorScheme ?? Appearance.getColorScheme(),\r\n      colors: getThemeColors(this.state.colors.primary, colorScheme)\r\n    });\r\n  }\r\n}\n"})})}),(0,n.jsx)(l.A,{value:"theme-settings-file",label:"ThemeSettings",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",metastring:'title="/src/screens/ThemeSettings.tsx" showLineNumbers',children:"import React from 'react';\r\nimport { StyleSheet, Pressable, View, Text, ColorValue } from 'react-native';\r\n\r\n// highlight-start\r\nimport { useThemeContext } from '@flexnative/theme-context';\r\nimport { lightRedTheme, lightBlueTheme, darkRedTheme, darkBlueTheme, MyColorsColors } from './colors';\r\n// highlight-end\r\n\r\ntype BtnToggleProps = {\r\n  title: string,\r\n  backgroundColor: ColorValue,\r\n  theme: 'red' | 'blue'\r\n}\r\n\r\nconst BtnColorToggle = React.memo((props: BtnToggleProps) => {\r\n  const theme = useThemeContext();\r\n\r\n  const onTheme = async (): Promise<void>  => {\r\n    let newColors: BaseTheme<MyColorsColors>;\r\n\r\n    if(theme.colorScheme === 'dark')\r\n      newColors = props.theme 'red' ? darkRedTheme : darkBlueTheme;\r\n    else\r\n      newColors = props.theme 'red' ? lightRedTheme : lightBlueTheme;\r\n\r\n    await theme.setTheme!(props.theme);\r\n  };\r\n\r\n  return (\r\n    <Pressable onPress={onTheme} style={[styles.btn, {backgroundColor: props.backgroundColor}]}>\r\n      <Text style={styles.btnTitle}>\r\n        {props.title}\r\n      </Text>\r\n    </Pressable>\r\n  );\r\n});\r\n\r\nexport default React.memo(() => {\r\n  const theme = useThemeContext();\r\n\r\n  return (\r\n    <View style={[styles.container, {backgroundColor: theme.colors.primary}]}>\r\n      <Text style={styles.title}>Theme Settings</Text>\r\n      <BtnColorToggle title='Set Red Theme' backgroundColor='#FF0000' theme={redTheme} />\r\n      <BtnColorToggle title='Set Blue Theme' backgroundColor='#00008B' theme={blueTheme} />\r\n    </View>\r\n  );\r\n});\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    padding: 15\r\n  },\r\n  title: {\r\n    fontSize: 32,\r\n    fontWeight: 'bold',\r\n    paddingVertical: 18,\r\n    color: '#ffffff'\r\n  },\r\n  btn: {\r\n    width: '100%',\r\n    borderStyle: 'solid',\r\n    borderWidth: 1,\r\n    paddingVertical: 15,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    marginVertical: 15\r\n  },\r\n  btnTitle: {\r\n    fontSize: 18,\r\n    color: '#ffffff'\r\n  },\r\n});\n"})})}),(0,n.jsx)(l.A,{value:"app-file",label:"App",children:(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-jsx",metastring:'title="/App.ts" showLineNumbers',children:"import React from 'react';\r\n\r\nimport ThemeSettings from './src/screens/ThemeSettings.tsx';\r\nimport MyThemeProvider from './src/theme/MyThemeProvider.tsx';\r\n\r\n\r\nexport default function App() {\r\n  return (\r\n    <MyThemeProvider>\r\n      <ThemeSettings />\r\n    </MyThemeProvider>\r\n  );\r\n}\n"})})})]})]})}function d(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},7227:(e,r,t)=>{t.d(r,{A:()=>l});t(96540);var n=t(34164);const o={tabItem:"tabItem_Ymn6"};var a=t(74848);function l(e){let{children:r,hidden:t,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,n.A)(o.tabItem,l),hidden:t,children:r})}},49489:(e,r,t)=>{t.d(r,{A:()=>C});var n=t(96540),o=t(34164),a=t(24245),l=t(56347),s=t(36494),i=t(62814),c=t(45167),m=t(69900);function h(e){return n.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,n.isValidElement)(e)&&function(e){const{props:r}=e;return!!r&&"object"==typeof r&&"value"in r}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:r,children:t}=e;return(0,n.useMemo)((()=>{const e=r??function(e){return h(e).map((e=>{let{props:{value:r,label:t,attributes:n,default:o}}=e;return{value:r,label:t,attributes:n,default:o}}))}(t);return function(e){const r=(0,c.XI)(e,((e,r)=>e.value===r.value));if(r.length>0)throw new Error(`Docusaurus error: Duplicate values "${r.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[r,t])}function d(e){let{value:r,tabValues:t}=e;return t.some((e=>e.value===r))}function p(e){let{queryString:r=!1,groupId:t}=e;const o=(0,l.W6)(),a=function(e){let{queryString:r=!1,groupId:t}=e;if("string"==typeof r)return r;if(!1===r)return null;if(!0===r&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:r,groupId:t});return[(0,i.aZ)(a),(0,n.useCallback)((e=>{if(!a)return;const r=new URLSearchParams(o.location.search);r.set(a,e),o.replace({...o.location,search:r.toString()})}),[a,o])]}function f(e){const{defaultValue:r,queryString:t=!1,groupId:o}=e,a=u(e),[l,i]=(0,n.useState)((()=>function(e){let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!d({value:r,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${r}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return r}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:r,tabValues:a}))),[c,h]=p({queryString:t,groupId:o}),[f,g]=function(e){let{groupId:r}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(r),[o,a]=(0,m.Dv)(t);return[o,(0,n.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:o}),x=(()=>{const e=c??f;return d({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{x&&i(x)}),[x]);return{selectedValue:l,selectValue:(0,n.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),h(e),g(e)}),[h,g,a]),tabValues:a}}var g=t(11062);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function v(e){let{className:r,block:t,selectedValue:n,selectValue:l,tabValues:s}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),m=e=>{const r=e.currentTarget,t=i.indexOf(r),o=s[t].value;o!==n&&(c(r),l(o))},h=e=>{let r=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=i.indexOf(e.currentTarget)+1;r=i[t]??i[0];break}case"ArrowLeft":{const t=i.indexOf(e.currentTarget)-1;r=i[t]??i[i.length-1];break}}r?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},r),children:s.map((e=>{let{value:r,label:t,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:n===r?0:-1,"aria-selected":n===r,ref:e=>i.push(e),onKeyDown:h,onClick:m,...a,className:(0,o.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":n===r}),children:t??r},r)}))})}function T(e){let{lazy:r,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(r){const e=l.find((e=>e.props.value===a));return e?(0,n.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:l.map(((e,r)=>(0,n.cloneElement)(e,{key:r,hidden:e.props.value!==a})))})}function y(e){const r=f(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,b.jsx)(v,{...r,...e}),(0,b.jsx)(T,{...r,...e})]})}function C(e){const r=(0,g.A)();return(0,b.jsx)(y,{...e,children:h(e.children)},String(r))}}}]);
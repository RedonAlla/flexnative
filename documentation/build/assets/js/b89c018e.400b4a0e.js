"use strict";(self.webpackChunk_flexnative_framework_docks_3=self.webpackChunk_flexnative_framework_docks_3||[]).push([[5189],{49896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>u});const r=JSON.parse('{"id":"theme/examples","title":"Example","description":"Below example shows a full example how to extend ThemeProvider and implement setColorScheme method to support to dark mode","source":"@site/docs/theme/examples.mdx","sourceDirName":"theme","slug":"/theme/examples","permalink":"/flexnative/docs/theme/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/RedonAlla/flexnative/edit/main/documentation/docs/theme/examples.mdx","tags":[{"inline":false,"label":"React","permalink":"/flexnative/docs/tags/react","description":"The library for web and native user interfaces."},{"inline":false,"label":"React Native","permalink":"/flexnative/docs/tags/react-native","description":"Create native apps for Android, iOS, and more using React"},{"inline":false,"label":"Expo","permalink":"/flexnative/docs/tags/expo","description":"Create universal native apps with React that run on Android, iOS, and the web. Iterate with confidence."},{"inline":false,"label":"Framework","permalink":"/flexnative/docs/tags/framework","description":"FlexNative is a component library that enables developers to build universal design systems. It is built on top of React Native, allowing you to develop apps for Android, iOS, and the Web."},{"inline":false,"label":"Component","permalink":"/flexnative/docs/tags/component","description":"Create user interfaces from components."}],"version":"current","lastUpdatedAt":1727136000000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5,"title":"Example","last_update":{"date":"2024-09-24T00:00:00.000Z","author":"Redon Alla"},"tags":["react","react-native","expo","framework","component"]},"sidebar":"componentsSidebar","previous":{"title":"Consuming Themes","permalink":"/flexnative/docs/theme/consuming-theme"},"next":{"title":"Components","permalink":"/flexnative/docs/components/"}}');var o=n(74848),a=n(28453),s=n(49489),l=n(7227);const i={sidebar_position:5,title:"Example",last_update:{date:new Date("2024-09-24T00:00:00.000Z"),author:"Redon Alla"},tags:["react","react-native","expo","framework","component"]},c=void 0,m={},u=[];function h(e){const t={a:"a",code:"code",em:"em",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(t.p,{children:["Below example shows a full example how to extend ",(0,o.jsx)(t.strong,{children:"ThemeProvider"})," and implement ",(0,o.jsx)(t.code,{children:"setColorScheme"})," method to support to dark mode\nand using multiple themes."]}),"\n",(0,o.jsxs)(t.p,{children:["To support multipe themes you must extend ",(0,o.jsx)(t.strong,{children:(0,o.jsx)(t.a,{href:"/docs/getting-started/setup-@flexnative/theme-provider#using-themeprovider",children:"ThemeProvider"})}),"\nand implement ",(0,o.jsx)(t.code,{children:"onChangeTheme"})," method or you can create you own ",(0,o.jsx)(t.em,{children:"ThemeContext"}),"."]}),"\n",(0,o.jsxs)(s.A,{children:[(0,o.jsx)(l.A,{value:"colors-file",label:"colors",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:'title="/src/theme/colors.ts" showLineNumbers',children:"import { ColorValue } from 'react-native';\nimport { light, BaseTheme } from '@flexnative/theme-context';\n\nexport interface MyExtraColorsProps {\n  color1: ColorValue,\n  color2: ColorValue\n};\n\nexport const lightRedTheme: BaseTheme<MyExtraColorsProps> = {\n  ...light,\n  primary: '#FF0000',\n  color1: '#C51162',\n  color2: '#7B1FA2',\n}\n\nexport const lightBlueTheme: BaseTheme<MyExtraColorsProps> = {\n  ...light,\n  primary: '#00008B',\n  color1: '#C51162',\n  color2: '#7B1FA2',\n}\n\nexport const darkRedTheme: BaseTheme<MyExtraColorsProps> = {\n  ...dark,\n  primary: '#FF0000',\n  color1: '#C51162',\n  color2: '#7B1FA2',\n}\n\nexport const darkBlueTheme: BaseTheme<MyExtraColorsProps> = {\n  ...dark,\n  primary: '#00008B',\n  color1: '#C51162',\n  color2: '#7B1FA2',\n}\n"})})}),(0,o.jsx)(l.A,{value:"themprovider-file",label:"MyThemeProvider",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:'title="/src/theme/MyThemeProvider.tsx" showLineNumbers',children:"import React from 'react';\nimport { ColorSchemeName, Appearance } from 'react-native';\n\n// highlight-start\nimport { ThemeProvider } from '@flexnative/theme-context';\n// highlight-end\nimport { MyExtraColorsProps } from './colors';\n\n\nexport default class MyThemeProvider extends ThemeProvider<MyExtraColorsProps> {\n  // Here you can implement your logic to get inital theme\n  // if you are storing your theme in persistent memory (db or local storage).\n  async onLoad(): Promise<void> {\n    const appThemeStorage = await Storage.getItem(APP_THEME, defaultTheme);\n    Appearance.addChangeListener(this.onAppearanceChange);\n\n    this.setState({\n      scheme: appThemeStorage.scheme,\n      colors: getThemeColors(appThemeStorage.primaryColor, appThemeStorage.scheme)\n    });\n  }\n\n  onAppearanceChange = (scheme: Appearance.AppearancePreferences) => {\n    if(this.state.scheme === null) {\n      this.setState({ ...this.state });\n    }\n    else {\n      this.setState({\n        scheme: scheme.scheme,\n        colors: getThemeColors(this.state.colors.primary, scheme.scheme)\n      });\n    }\n  }\n\n  onChangeTheme = async (theme: BaseTheme): Promise<void> => {\n    await Storage.saveItem(APP_THEME, { scheme: this.state.scheme, primaryColor: theme.primary });\n    this.setState({ colors: theme });\n  }\n\n  onChangeColorScheme = async (scheme: ColorSchemeName): Promise<void>  => {\n    await Storage.saveItem(APP_THEME, { scheme: scheme, primaryColor: this.state.colors.primary });\n\n    this.setState({\n      scheme: scheme ?? Appearance.getColorScheme(),\n      colors: getThemeColors(this.state.colors.primary, scheme)\n    });\n  }\n}\n"})})}),(0,o.jsx)(l.A,{value:"theme-settings-file",label:"ThemeSettings",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:'title="/src/screens/ThemeSettings.tsx" showLineNumbers',children:"import React from 'react';\nimport { StyleSheet, Pressable, View, Text, ColorValue } from 'react-native';\n\n// highlight-start\nimport { useThemeContext } from '@flexnative/theme-context';\nimport { lightRedTheme, lightBlueTheme, darkRedTheme, darkBlueTheme, MyExtraColorsProps } from './colors';\n// highlight-end\n\ntype BtnToggleProps = {\n  title: string,\n  backgroundColor: ColorValue,\n  theme: 'red' | 'blue'\n}\n\nconst BtnColorToggle = React.memo((props: BtnToggleProps) => {\n  const theme = useThemeContext();\n\n  const onTheme = async (): Promise<void>  => {\n    let newColors: BaseTheme<MyExtraColorsProps>;\n\n    if(theme.scheme === 'dark')\n      newColors = props.theme 'red' ? darkRedTheme : darkBlueTheme;\n    else\n      newColors = props.theme 'red' ? lightRedTheme : lightBlueTheme;\n\n    await theme.setTheme!(props.theme);\n  };\n\n  return (\n    <Pressable onPress={onTheme} style={[styles.btn, {backgroundColor: props.backgroundColor}]}>\n      <Text style={styles.btnTitle}>\n        {props.title}\n      </Text>\n    </Pressable>\n  );\n});\n\nexport default React.memo(() => {\n  const theme = useThemeContext();\n\n  return (\n    <View style={[styles.container, {backgroundColor: theme.colors.primary}]}>\n      <Text style={styles.title}>Theme Settings</Text>\n      <BtnColorToggle title='Set Red Theme' backgroundColor='#FF0000' theme={redTheme} />\n      <BtnColorToggle title='Set Blue Theme' backgroundColor='#00008B' theme={blueTheme} />\n    </View>\n  );\n});\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 15\n  },\n  title: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    paddingVertical: 18,\n    color: '#ffffff'\n  },\n  btn: {\n    width: '100%',\n    borderStyle: 'solid',\n    borderWidth: 1,\n    paddingVertical: 15,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginVertical: 15\n  },\n  btnTitle: {\n    fontSize: 18,\n    color: '#ffffff'\n  },\n});\n"})})}),(0,o.jsx)(l.A,{value:"app-file",label:"App",children:(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-jsx",metastring:'title="/App.ts" showLineNumbers',children:"import React from 'react';\n\nimport ThemeSettings from './src/screens/ThemeSettings.tsx';\nimport MyThemeProvider from './src/theme/MyThemeProvider.tsx';\n\n\nexport default function App() {\n  return (\n    <MyThemeProvider>\n      <ThemeSettings />\n    </MyThemeProvider>\n  );\n}\n"})})})]})]})}function d(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},7227:(e,t,n)=>{n.d(t,{A:()=>s});n(96540);var r=n(34164);const o={tabItem:"tabItem_Ymn6"};var a=n(74848);function s(e){let{children:t,hidden:n,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,s),hidden:n,children:t})}},49489:(e,t,n)=>{n.d(t,{A:()=>C});var r=n(96540),o=n(34164),a=n(24245),s=n(56347),l=n(36494),i=n(62814),c=n(45167),m=n(69900);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:o}}=e;return{value:t,label:n,attributes:r,default:o}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const o=(0,s.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i.aZ)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(o.location.search);t.set(a,e),o.replace({...o.location,search:t.toString()})}),[a,o])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,a=h(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:a}))),[c,u]=p({queryString:n,groupId:o}),[f,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,a]=(0,m.Dv)(n);return[o,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:o}),x=(()=>{const e=c??f;return d({value:e,tabValues:a})?e:null})();(0,l.A)((()=>{x&&i(x)}),[x]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),g(e)}),[u,g,a]),tabValues:a}}var g=n(11062);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=n(74848);function v(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:l}=e;const i=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),m=e=>{const t=e.currentTarget,n=i.indexOf(t),o=l[n].value;o!==r&&(c(t),s(o))},u=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=i.indexOf(e.currentTarget)+1;t=i[n]??i[0];break}case"ArrowLeft":{const n=i.indexOf(e.currentTarget)-1;t=i[n]??i[i.length-1];break}}t?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>i.push(e),onKeyDown:u,onClick:m,...a,className:(0,o.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function T(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function y(e){const t=f(e);return(0,b.jsxs)("div",{className:(0,o.A)("tabs-container",x.tabList),children:[(0,b.jsx)(v,{...t,...e}),(0,b.jsx)(T,{...t,...e})]})}function C(e){const t=(0,g.A)();return(0,b.jsx)(y,{...e,children:u(e.children)},String(t))}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>l});var r=n(96540);const o={},a=r.createContext(o);function s(e){const t=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:t},e.children)}}}]);
(self.webpackChunk_flexnative_framework_docks_3=self.webpackChunk_flexnative_framework_docks_3||[]).push([[6002],{16786:(e,n,t)=>{"use strict";t.d(n,{Ay:()=>r,RM:()=>a});var l=t(74848),s=t(28453);const a=[];function i(e){const n={a:"a",code:"code",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:e.name})," is part of the ",(0,l.jsx)(n.a,{href:"./",children:(0,l.jsx)(n.strong,{children:"@flexnative/inputs"})})," package.\nTo use the ",(0,l.jsx)(n.strong,{children:e.name})," you needs to install ",(0,l.jsx)(n.code,{children:"@flexnative/inputs"})," package.\n",(0,l.jsx)(n.a,{href:"/flexnative/docs/components/inputs/#installation",children:"Fallow this link"})," on how to install the package."]})}function r(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(i,{...e})}):i(e)}},66351:(e,n,t)=>{"use strict";t.r(n),t.d(n,{assets:()=>oe,contentTitle:()=>he,default:()=>ue,frontMatter:()=>re,metadata:()=>l,toc:()=>de});const l=JSON.parse('{"id":"components/inputs/check-box/index","title":"Check Box","description":"The CheckBox is typically used to represent boolean values via a binary checked state.","source":"@site/docs/components/inputs/check-box/index.mdx","sourceDirName":"components/inputs/check-box","slug":"/components/inputs/check-box/","permalink":"/flexnative/docs/components/inputs/check-box/","draft":false,"unlisted":false,"editUrl":"https://github.com/RedonAlla/flexnative/edit/main/documentation/docs/components/inputs/check-box/index.mdx","tags":[{"inline":false,"label":"React","permalink":"/flexnative/docs/tags/react","description":"The library for web and native user interfaces."},{"inline":false,"label":"React Native","permalink":"/flexnative/docs/tags/react-native","description":"Create native apps for Android, iOS, and more using React"},{"inline":false,"label":"Expo","permalink":"/flexnative/docs/tags/expo","description":"Create universal native apps with React that run on Android, iOS, and the web. Iterate with confidence."},{"inline":false,"label":"Framework","permalink":"/flexnative/docs/tags/framework","description":"FlexNative is a component library that enables developers to build universal design systems. It is built on top of React Native, allowing you to develop apps for Android, iOS, and the Web."},{"inline":false,"label":"Component","permalink":"/flexnative/docs/tags/component","description":"Create user interfaces from components."},{"inline":false,"label":"Inputs","permalink":"/flexnative/docs/tags/inputs","description":"A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad."}],"version":"current","lastUpdatedAt":1732924800000,"frontMatter":{"title":"Check Box","last_update":{"date":"2024-11-30T00:00:00.000Z","author":"Redon Alla"},"tags":["react","react-native","expo","framework","component","inputs"]},"sidebar":"componentsSidebar","previous":{"title":"Inputs","permalink":"/flexnative/docs/components/inputs/"},"next":{"title":"Check List","permalink":"/flexnative/docs/components/inputs/check-list/"}}');var s=t(74848),a=t(28453),i=t(16786),r=t(54182),h=t(76449),o=t(45424),d=t(96540),c=t(75117);const u=class extends d.Component{constructor(e){super(e),this.state={check1:void 0,check2:void 0,check3:void 0},this.handleChangeCheck1=this.handleChangeCheck1.bind(this),this.handleChangeCheck2=this.handleChangeCheck2.bind(this),this.handleChangeCheck3=this.handleChangeCheck3.bind(this)}handleChangeCheck1(){this.state.check1?this.setState({check1:void 0}):this.setState({check1:{id:1,color:"red"}})}handleChangeCheck2(){this.state.check2?this.setState({check2:void 0}):this.setState({check2:"blue"})}handleChangeCheck3(){const e=!this.state.check3;this.setState({check3:e})}render(){return(0,s.jsxs)("div",{className:"example-block demo-column",children:[(0,s.jsxs)("div",{className:"demo-row",children:[(0,s.jsx)(c.Jl,{value:this.state.check1,onValueChange:this.handleChangeCheck1,label:"Object value"}),(0,s.jsx)(c.Jl,{value:this.state.check2,onValueChange:this.handleChangeCheck2,label:"String value"}),(0,s.jsx)(c.Jl,{value:this.state.check3,onValueChange:this.handleChangeCheck3,label:"Boolean value"})]}),(0,s.jsxs)("pre",{children:[(0,s.jsx)("b",{children:"Object value: "}),JSON.stringify(this.state.check1),"\n\n",(0,s.jsx)("b",{children:"String value: "}),JSON.stringify(this.state.check2),"\n\n",(0,s.jsx)("b",{children:"Boolean value: "}),JSON.stringify(this.state.check3)]})]})}},x="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:12:20\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:34:20\n * @ Description: Examples of Check component with different value types.\n */\n\nimport React from \"react\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\ntype ValueType = {\n  id: number,\n  color: string;\n}\n\ntype StateType = {\n  check1?: ValueType,\n  check2?: string,\n  check3?: boolean,\n}\n\nexport default class extends React.Component<{}, StateType> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      check1: undefined,\n      check2: undefined,\n      check3: undefined\n    }\n    \n    this.handleChangeCheck1 = this.handleChangeCheck1.bind(this);\n    this.handleChangeCheck2 = this.handleChangeCheck2.bind(this);\n    this.handleChangeCheck3 = this.handleChangeCheck3.bind(this);\n  }\n\n  public handleChangeCheck1() {\n    const val = this.state.check1;\n\n    if(val)\n      this.setState({check1: undefined});\n    else\n      this.setState({check1: {id: 1, color: 'red'}});\n  }\n\n  public handleChangeCheck2() {\n    const val = this.state.check2;\n\n    if(val)\n      this.setState({check2: undefined});\n    else\n      this.setState({check2: 'blue'});\n  }\n\n  public handleChangeCheck3() {\n    const val = !this.state.check3;\n    this.setState({check3: val});\n  }\n\n  public render() {\n    return (\n      <div className='example-block demo-column'>\n        <div className='demo-row'>\n          <Check value={this.state.check1} onValueChange={this.handleChangeCheck1} label='Object value' />\n          <Check value={this.state.check2} onValueChange={this.handleChangeCheck2} label='String value' />\n          <Check value={this.state.check3} onValueChange={this.handleChangeCheck3} label='Boolean value' />\n        </div>\n\n        <pre>\n          <b>Object value: </b>{JSON.stringify(this.state.check1)}{'\\n\\n'}\n          <b>String value: </b>{JSON.stringify(this.state.check2)}{'\\n\\n'}\n          <b>Boolean value: </b>{JSON.stringify(this.state.check3)}\n        </pre>\n      </div>\n    );\n  }\n}",m=class extends d.Component{constructor(e){super(e),this.handleChange=this.handleChange.bind(this)}handleChange(e){const n=this.state.items;n[e]=!n[e],this.setState({items:n})}},p=[!1,!1,!1,!1],C=class extends m{constructor(e){super(e),this.state={items:p}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),type:"outlined",label:"outlined"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),type:"solid",label:"solid"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),type:"inverse",label:"inverse"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),type:"ghost",label:"ghost"})]})}},g="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:27:34\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:33:40\n * @ Description: Examples of Check component with different types.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} type='outlined' label='outlined' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} type='solid' label='solid' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} type='inverse' label='inverse' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} type='ghost' label='ghost' />\n      </div>\n    );\n  }\n}",b=[!1,!1,!1,!1],j=class extends m{constructor(e){super(e),this.state={items:b}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),size:"small",label:"small"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),size:"default",label:"solid"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),size:"medium",label:"medium"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),size:"large",label:"large"})]})}},v="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:31:47\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:33:21\n * @ Description: Examples of Check component with different sizes.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} size='small' label='small' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} size='default' label='solid' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} size='medium' label='medium' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} size='large' label='large' />\n      </div>\n    );\n  }\n}",f=[!1,!1,!1,!1,!1,!1],k=class extends m{constructor(e){super(e),this.state={items:f}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),radius:"none",label:"none"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),radius:"small",label:"small"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),radius:"medium",label:"medium"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),radius:"large",label:"large"}),(0,s.jsx)(c.Jl,{value:this.state.items[4],onValueChange:()=>this.handleChange(4),radius:"full",label:"full"}),(0,s.jsx)(c.Jl,{value:this.state.items[5],onValueChange:()=>this.handleChange(5),radius:5,label:"5"})]})}},y="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:35:08\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:32:18\n * @ Description: Examples of Check component with border radius.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} radius='none' label='none' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} radius='small' label='small' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} radius='medium' label='medium' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} radius='large' label='large' />\n        <Check value={this.state.items![4]} onValueChange={() => this.handleChange(4)} radius='full' label='full' />\n        <Check value={this.state.items![5]} onValueChange={() => this.handleChange(5)} radius={5} label='5' />\n      </div>\n    );\n  }\n}",V=[!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1,!1],A=class extends m{constructor(e){super(e),this.state={items:V}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),color:"default",label:"default"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),color:"primary",label:"primary"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),color:"secondary",label:"secondary"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),color:"light",label:"light"}),(0,s.jsx)(c.Jl,{value:this.state.items[4],onValueChange:()=>this.handleChange(4),color:"dark",label:"dark"}),(0,s.jsx)(c.Jl,{value:this.state.items[5],onValueChange:()=>this.handleChange(5),color:"info",label:"info"}),(0,s.jsx)(c.Jl,{value:this.state.items[6],onValueChange:()=>this.handleChange(6),color:"success",label:"success"}),(0,s.jsx)(c.Jl,{value:this.state.items[7],onValueChange:()=>this.handleChange(7),color:"warning",label:"warning"}),(0,s.jsx)(c.Jl,{value:this.state.items[8],onValueChange:()=>this.handleChange(8),color:"error",label:"error"}),(0,s.jsx)(c.Jl,{value:this.state.items[9],onValueChange:()=>this.handleChange(9),color:"crimson",label:"crimson"}),(0,s.jsx)(c.Jl,{value:this.state.items[10],onValueChange:()=>this.handleChange(10),color:"#ed143d",label:"#ed143d"}),(0,s.jsx)(c.Jl,{value:this.state.items[11],onValueChange:()=>this.handleChange(11),color:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,s.jsx)(c.Jl,{value:this.state.items[12],onValueChange:()=>this.handleChange(12),color:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"})]})}},E="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:37:38\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:26:38\n * @ Description: Examples of Check component with different colors.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n  false,\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} color='default' label='default' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} color='primary' label='primary' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} color='secondary' label='secondary' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} color='light' label='light' />\n        <Check value={this.state.items![4]} onValueChange={() => this.handleChange(4)} color='dark' label='dark' />\n        <Check value={this.state.items![5]} onValueChange={() => this.handleChange(5)} color='info' label='info' />\n        <Check value={this.state.items![6]} onValueChange={() => this.handleChange(6)} color='success' label='success' />\n        <Check value={this.state.items![7]} onValueChange={() => this.handleChange(7)} color='warning' label='warning' />\n        <Check value={this.state.items![8]} onValueChange={() => this.handleChange(8)} color='error' label='error'/>\n        <Check value={this.state.items![9]} onValueChange={() => this.handleChange(9)} color='crimson' label='crimson' />\n        <Check value={this.state.items![10]} onValueChange={() => this.handleChange(10)} color='#ed143d' label='#ed143d'/>\n        <Check value={this.state.items![11]} onValueChange={() => this.handleChange(11)} color='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\n        <Check value={this.state.items![12]} onValueChange={() => this.handleChange(12)} color='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\n      </div>\n    );\n  }\n}",R=[!1,!1,!1,!1,!1,!1],S=class extends m{constructor(e){super(e),this.state={items:R}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),type:"outlined",borderWidth:"none",label:"none (default)"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),type:"outlined",borderWidth:"hairline",label:"hairline"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),type:"outlined",borderWidth:"thin",label:"thin"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),type:"outlined",borderWidth:"base",label:"base"}),(0,s.jsx)(c.Jl,{value:this.state.items[4],onValueChange:()=>this.handleChange(4),type:"outlined",borderWidth:"thick",label:"thick"}),(0,s.jsx)(c.Jl,{value:this.state.items[5],onValueChange:()=>this.handleChange(5),type:"outlined",borderWidth:3,label:"3"})]})}},w="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:40:39\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:24:55\n * @ Description: Examples of Check component with borders width.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n  false,\n  false\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} type='outlined' borderWidth='none' label='none (default)' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} type='outlined' borderWidth='hairline' label='hairline' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} type='outlined' borderWidth='thin' label='thin' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} type='outlined' borderWidth='base' label='base' />\n        <Check value={this.state.items![4]} onValueChange={() => this.handleChange(4)} type='outlined' borderWidth='thick' label='thick' />\n        <Check value={this.state.items![5]} onValueChange={() => this.handleChange(5)} type='outlined' borderWidth={3} label='3' />\n      </div>\n    );\n  }\n}",T=[!1,!1,!1,!1],J=class extends m{constructor(e){super(e),this.state={items:T}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),type:"outlined",borderColor:"crimson",label:"crimson"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),type:"outlined",borderColor:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),type:"outlined",borderColor:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),type:"outlined",borderColor:"#ed143d",label:"#ed143d"})]})}},N="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:45:16\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:24:43\n * @ Description: Examples of Check component with borders color.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} type='outlined' borderColor='crimson' label='crimson' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} type='outlined' borderColor='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} type='outlined' borderColor='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} type='outlined' borderColor='#ed143d' label='#ed143d' />\n      </div>\n    );\n  }\n}",B=[!1,!1,!1,!1],M=class extends m{constructor(e){super(e),this.state={items:B}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),type:"outlined",checkedBorderColor:"crimson",label:"crimson"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),type:"outlined",checkedBorderColor:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),type:"outlined",checkedBorderColor:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),type:"outlined",checkedBorderColor:"#ed143d",label:"#ed143d"})]})}},P="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:49:24\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:26:14\n * @ Description: Examples of Check component with borders color when it is in check state.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} type='outlined' checkedBorderColor='crimson' label='crimson' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} type='outlined' checkedBorderColor='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} type='outlined' checkedBorderColor='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} type='outlined' checkedBorderColor='#ed143d' label='#ed143d' />\n      </div>\n    );\n  }\n}",O=[!1,!1,!1,!1,!1,!1],D=class extends m{constructor(e){super(e),this.state={items:O}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:!0,type:"outlined",label:"outlined",disabled:!0}),(0,s.jsx)(c.Jl,{value:!1,type:"outlined",label:"outlined",disabled:!0}),(0,s.jsx)(c.Jl,{value:!0,type:"solid",label:"solid",disabled:!0}),(0,s.jsx)(c.Jl,{value:!1,type:"solid",label:"solid",disabled:!0}),(0,s.jsx)(c.Jl,{value:!0,type:"inverse",label:"inverse",disabled:!0}),(0,s.jsx)(c.Jl,{value:!1,type:"inverse",label:"inverse",disabled:!0})]})}},z="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:52:35\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:27:17\n * @ Description: Examples of Check component in disabled state.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n  false,\n  false\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={true} type='outlined' label='outlined' disabled />\n        <Check value={false} type='outlined' label='outlined' disabled />\n        \n        <Check value={true} type='solid' label='solid' disabled />\n        <Check value={false} type='solid' label='solid' disabled />\n\n        <Check value={true} type='inverse' label='inverse' disabled />\n        <Check value={false} type='inverse' label='inverse' disabled />\n      </div>\n    );\n  }\n}",I=[!1,!1,!1,!1],W=class extends m{constructor(e){super(e),this.state={items:I}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),backgroundColor:"crimson",label:"crimson"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),backgroundColor:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),backgroundColor:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),backgroundColor:"#ed143d",label:"#ed143d"})]})}},L="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-12 23:58:42\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:24:34\n * @ Description: Examples of Check component with background color.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} backgroundColor='crimson' label='crimson' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} backgroundColor='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} backgroundColor='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} backgroundColor='#ed143d' label='#ed143d' />\n      </div>\n    );\n  }\n}",_=[!1,!1,!1,!1],F=class extends m{constructor(e){super(e),this.state={items:_}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),checkedBackgroundColor:"crimson",label:"crimson"}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),checkedBackgroundColor:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,s.jsx)(c.Jl,{value:this.state.items[2],onValueChange:()=>this.handleChange(2),checkedBackgroundColor:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"}),(0,s.jsx)(c.Jl,{value:this.state.items[3],onValueChange:()=>this.handleChange(3),checkedBackgroundColor:"#ed143d",label:"#ed143d"})]})}},U="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-13 00:03:57\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:25:42\n * @ Description: Examples of Check component with background color when it is in check state.\n */\n\nimport React from \"react\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} checkedBackgroundColor='crimson' label='crimson' />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} checkedBackgroundColor='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\n        <Check value={this.state.items![2]} onValueChange={() => this.handleChange(2)} checkedBackgroundColor='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\n        <Check value={this.state.items![3]} onValueChange={() => this.handleChange(3)} checkedBackgroundColor='#ed143d' label='#ed143d' />\n      </div>\n    );\n  }\n}";var K=t(71582),q=t(32533);const Y=[!1,!1,!1,!1],Z=class extends m{constructor(e){super(e),this.state={items:Y}}render(){return(0,s.jsxs)("div",{className:"example-block",children:[(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),label:(0,s.jsx)(G,{})}),(0,s.jsx)(c.Jl,{value:this.state.items[1],onValueChange:()=>this.handleChange(1),label:"labelStyles",labelStyle:H("rgb(35, 189, 224)","crimson")})]})}};function G(){return(0,s.jsxs)(K.EY,{style:$.label,children:[(0,s.jsx)(q.default,{name:"avatar",style:{paddingLeft:5},onPress:()=>"web"===K.OD.OS?alert("Custom Element as label"):K.Fc.alert("Alert Title","Custom Element as label",[{text:"OK"}])})," Custom Element Label"]})}const H=(e,n)=>t=>[{color:t.focused?n:e}],$=K.vv.create({label:{color:"crimson"}}),Q="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-13 00:08:46\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:29:06\n * @ Description: Examples of Check component with custom label element.\n */\n\nimport React from \"react\";\nimport { Alert, ColorValue, Platform, StyleProp, StyleSheet, Text, TextStyle } from \"react-native\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check, StateCallbackType } from '@flexnative/inputs';\nimport Icon from \"@flexnative/icons\";\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]} onValueChange={() => this.handleChange(0)} label={<Label />} />\n        <Check value={this.state.items![1]} onValueChange={() => this.handleChange(1)} label='labelStyles' labelStyle={labelStyles('rgb(35, 189, 224)', 'crimson')} />\n      </div>\n    );\n  }\n}\n\nfunction Label() {\n  const openAlert = () =>\n    Platform.OS === 'web'\n      ? alert('Custom Element as label')\n      : Alert.alert('Alert Title', 'Custom Element as label', [\n          {text: 'OK'},\n        ]);\n    \n  return <Text style={styles.label}>\n    <Icon name=\"avatar\" style={{paddingLeft: 5}} onPress={openAlert} /> Custom Element Label\n  </Text>;\n}\n\nconst labelStyles = (defaultColor: ColorValue, activeColor: ColorValue) => {\n  return (state: StateCallbackType): StyleProp<TextStyle> => {\n    return [\n      {\n        color: state.focused ? activeColor : defaultColor\n      }\n    ]\n  }\n} \n\nconst styles = StyleSheet.create({\n  label: {\n    color: 'crimson'\n  },\n});",X=[!1,!1,!1,!1],ee=class extends m{constructor(e){super(e),this.state={items:X}}render(){return(0,s.jsx)("div",{className:"example-block",children:(0,s.jsx)(c.Jl,{value:this.state.items[0],onValueChange:()=>this.handleChange(0),label:"Custom Check Element",checkElement:(0,s.jsx)(ne,{}),unCheckElement:(0,s.jsx)(te,{})})})}};function ne(){return(0,s.jsx)(K.EY,{style:le.label,children:"\ud83d\ude0d"})}function te(){return(0,s.jsx)(K.EY,{style:le.label,children:"\ud83e\udd14"})}const le=K.vv.create({label:{fontSize:32}}),se="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-13 00:11:15\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:27:02\n * @ Description: Examples of Check component with custom element check.\n */\n\nimport React from \"react\";\nimport { StyleSheet, Text } from \"react-native\";\nimport ExampleContainer from \"./ExampleContainer\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\nconst items: Array<boolean> = [\n  false,\n  false,\n  false,\n  false,\n];\n\nexport default class extends ExampleContainer {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      items: items\n    }\n  }\n\n  public render() {\n    return (\n      <div className='example-block'>\n        <Check value={this.state.items![0]}\n              onValueChange={() => this.handleChange(0)}\n              label='Custom Check Element'\n              checkElement={<CheckElement />}\n              unCheckElement={<UncheckElement />}\n        />\n      </div>\n    );\n  }\n}\n\nfunction CheckElement() {\n  return <Text style={styles.label}>\ud83d\ude0d</Text>;\n}\nfunction UncheckElement() {\n  return <Text style={styles.label}>\ud83e\udd14</Text>;\n}\n\nconst styles = StyleSheet.create({\n  label: {\n    fontSize: 32\n  },\n});",ae=class extends d.Component{constructor(e){super(e),this.state={value:{id:1,color:"red"}},this.handleChange=this.handleChange.bind(this)}handleChange(e){this.setState({value:e})}render(){return(0,s.jsxs)("div",{className:"example-block demo-column",children:[(0,s.jsxs)("div",{className:"demo-row",children:[(0,s.jsx)(c.Jl,{value:1===this.state.value?.id,onValueChange:()=>this.handleChange({id:1,color:"red"}),label:"Color red"}),(0,s.jsx)(c.Jl,{value:2===this.state.value?.id,onValueChange:()=>this.handleChange({id:2,color:"blue"}),label:"Color blue"}),(0,s.jsx)(c.Jl,{value:3===this.state.value?.id,onValueChange:()=>this.handleChange({id:3,color:"green"}),label:"Color green"})]}),(0,s.jsx)("pre",{children:JSON.stringify(this.state.value)})]})}},ie="/**\n * @ Author: Redon Alla\n * @ Create Time: 2024-10-13 00:20:21\n * @ Modified by: Redon Alla\n * @ Modified time: 2024-10-16 21:30:10\n * @ Description: Examples of Check component used as Radio Button.\n */\n\nimport React from \"react\";\n\n// highlight-next-line\nimport { Check } from '@flexnative/inputs';\n\n\ntype ValueType = {\n  id: number,\n  color: string;\n}\n\ntype StateType = {\n  value?: ValueType\n}\nexport default class extends React.Component<{}, StateType> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      value: { id: 1, color: 'red'}\n    }\n    \n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public handleChange(value?: ValueType) {\n    this.setState({value});\n  }\n\n  public render() {\n    return (\n      <div className='example-block demo-column'>\n        <div className='demo-row'>\n          <Check value={this.state.value?.id === 1} onValueChange={() => this.handleChange({id: 1, color: 'red'})} label='Color red' />\n          <Check value={this.state.value?.id === 2} onValueChange={() => this.handleChange({id: 2, color: 'blue'})} label='Color blue' />\n          <Check value={this.state.value?.id === 3} onValueChange={() => this.handleChange({id: 3, color: 'green'})} label='Color green' />\n        </div>\n\n        <pre>\n          {JSON.stringify(this.state.value)}\n        </pre>\n      </div>\n    );\n  }\n}",re={title:"Check Box",last_update:{date:new Date("2024-11-30T00:00:00.000Z"),author:"Redon Alla"},tags:["react","react-native","expo","framework","component","inputs"]},he=void 0,oe={},de=[...i.RM,{value:"API",id:"api",level:2},{value:"Component",id:"component",level:2},{value:"Properties",id:"properties",level:2},{value:"CheckType",id:"checktype",level:3},{value:"InputColor",id:"inputcolor",level:3},{value:"CheckboxEvent&lt;T&gt;",id:"checkboxeventt",level:3},{value:"Use case Examples",id:"use-case-examples",level:2},{value:"Value",id:"value",level:3},{value:"Type",id:"type",level:3},{value:"Sizes",id:"sizes",level:3},{value:"Radius",id:"radius",level:3},{value:"Colors",id:"colors",level:3},{value:"Border Width",id:"border-width",level:3},{value:"Border Colors",id:"border-colors",level:3},{value:"Checked Border Colors",id:"checked-border-colors",level:3},{value:"Disabled",id:"disabled",level:3},{value:"Background Color",id:"background-color",level:3},{value:"Checked Background Color",id:"checked-background-color",level:3},{value:"Label",id:"label",level:3},{value:"Custom Check Element",id:"custom-check-element",level:3},{value:"Using as Radio Button",id:"using-as-radio-button",level:3},{value:"Playground",id:"playground",level:2}];function ce(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The CheckBox is typically used to represent boolean values via a binary checked state."}),"\n",(0,s.jsx)(i.Ay,{name:"FlexNative Checkbox"}),"\n",(0,s.jsxs)(n.p,{children:["This code defines a generic React component called Check, which represents a checkbox element.\nComponent extending React.PureComponent, which is optimized for performance by implementing a shallow prop and state comparison.\nThe component accepts various props for customization, such as value, type, size, colors, and label.\nIt handles changes via the handleChange method, which triggers an onValueChange callback when the checkbox is pressed.\nThe component renders a ",(0,s.jsx)(n.code,{children:"Pressable"})," element that toggles between checked and unchecked states, displaying appropriate check and label elements based on the current state."]}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",children:"import { Check, CheckProps } from '@flexnative/inputs';\n"})}),"\n",(0,s.jsx)(n.h2,{id:"component",children:"Component"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Check"})}),"\n",(0,s.jsxs)(n.p,{children:["Type: ",(0,s.jsxs)("code",{children:["React.PureComponent<",(0,s.jsx)(n.a,{href:"#properties",children:"CheckProps<T>"}),">"]})]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Required"}),(0,s.jsx)(n.th,{children:"Default Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"value"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"T"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Representing checkbox selected value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"type"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"#checktype",children:(0,s.jsx)(n.code,{children:"CheckType"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"inverse "})}),(0,s.jsxs)(n.td,{children:["Check box fill mode. ",(0,s.jsxs)(r.A,{type:"warning",children:["To have appearance for ",(0,s.jsx)("code",{children:"'text'"}),", ",(0,s.jsx)("code",{children:"'link'"}),", ",(0,s.jsx)("code",{children:"'ghost'"}),", with custom color you should use hex colors."]})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"size"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/flexnative/docs/theme/default-theme#sizes",children:(0,s.jsx)(n.code,{children:"Sizes"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"normal"})}),(0,s.jsx)(n.td,{children:"Check Box size."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"radius"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/flexnative/docs/theme/default-theme#borderradius",children:(0,s.jsx)(n.code,{children:"BorderRadius"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"medium"})}),(0,s.jsx)(n.td,{children:"Check Box border radius."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"borderWidth"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/flexnative/docs/theme/default-theme#borderwidth",children:(0,s.jsx)(n.code,{children:"BorderWidth"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"hairline"})}),(0,s.jsx)(n.td,{children:"Check Box borders width."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"borderColor"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/colors",children:(0,s.jsx)(n.code,{children:"ColorValue"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsxs)(n.td,{children:["Borders color according ",(0,s.jsx)(n.code,{children:"react-native"})," ColorValue."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"checkedBorderColor"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/colors",children:(0,s.jsx)(n.code,{children:"ColorValue"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsxs)(n.td,{children:["Borders color according ",(0,s.jsx)(n.code,{children:"react-native"})," ColorValue."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"disabled"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"boolean"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})}),(0,s.jsx)(n.td,{children:"Indicator if input it is disabled or not."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"color"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"/flexnative/docs/theme/default-theme#color",children:(0,s.jsx)(n.code,{children:"Color"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"theme.color.default"})}),(0,s.jsxs)(n.td,{children:["Color by theme or a custom color according ",(0,s.jsx)(n.code,{children:"react-native"})," ColorValue."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"backgroundColor"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/colors",children:(0,s.jsx)(n.code,{children:"ColorValue"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Input background color."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"checkedBackgroundColor"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/colors",children:(0,s.jsx)(n.code,{children:"ColorValue"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsxs)(n.td,{children:["Background color for active state according ",(0,s.jsx)(n.code,{children:"react-native"})," ColorValue."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"label"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"string"})," or ",(0,s.jsx)(n.a,{href:"https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html",children:(0,s.jsx)(n.code,{children:"React.ReactElement"})})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"string"})," value to display as labal, or ",(0,s.jsx)(n.a,{href:"https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html",children:(0,s.jsx)(n.code,{children:"React.ReactElement"})})," to display a custom element as a label."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"labelStyle"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"StyleProp<TextStyle>"})," or ",(0,s.jsx)(n.code,{children:"((state: StateCallbackType) => StyleProp<TextStyle>)"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Either text styles or a function that receives a boolean reflecting whether the component is currently active and returns text styles."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"checkElement"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html",children:(0,s.jsx)(n.code,{children:"React.ReactElement"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Custom element to display on checked status."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"unCheckElement"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://legacy.reactjs.org/blog/2014/10/14/introducing-react-elements.html",children:(0,s.jsx)(n.code,{children:"React.ReactElement"})})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Custom element to display on unchecked status."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"onChange"}),(0,s.jsx)(n.td,{children:(0,s.jsxs)("code",{children:["(event: NativeSyntheticEvent<",(0,s.jsx)(n.a,{href:"#checkboxeventt",children:"CheckboxEvent"}),"<T> \u2758 SyntheticEvent<HTMLInputElement, <",(0,s.jsx)(n.a,{href:"#checkboxeventt",children:"CheckboxEvent"}),"<T>>) => void;"]})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Callback that is invoked when the user presses the checkbox."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"onValueChange"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"(value: T) => void"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"Callback that is invoked when the user presses the checkbox."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"checktype",children:"CheckType"}),"\n",(0,s.jsxs)(n.p,{children:["One of ",(0,s.jsx)(n.code,{children:"'outlined' | 'solid' | 'inverse'"})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"outlined"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Property to set checkbox with transparent background with borders."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"solid"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Property to fill in solid mode the background color of the checkbox component."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"inverse"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"Property to set transparent background of the checkbox component and with solid background on check state."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"inputcolor",children:"InputColor"}),"\n",(0,s.jsx)(h.A,{}),"\n",(0,s.jsx)(n.h3,{id:"checkboxeventt",children:"CheckboxEvent<T>"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Name"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Required"}),(0,s.jsx)(n.th,{children:"Default Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"value"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"T"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsx)(n.td,{children:"A value representing current checkbox value."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"target"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"any"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"false"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"undefined"})}),(0,s.jsxs)(n.td,{children:["On native platforms, a ",(0,s.jsx)(n.code,{children:"NodeHandle"})," for the element on which the event has occurred. On web, a DOM node on which the event has occurred."]})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"use-case-examples",children:"Use case Examples"}),"\n",(0,s.jsxs)(n.p,{children:["The following example demonstrates the ",(0,s.jsx)(n.strong,{children:"FlexNative CheckBox"})," in action."]}),"\n",(0,s.jsx)(n.h3,{id:"value",children:"Value"}),"\n",(0,s.jsx)(o.A,{codeExample:x,children:(0,s.jsx)(u,{})}),"\n",(0,s.jsx)(n.h3,{id:"type",children:"Type"}),"\n",(0,s.jsx)(o.A,{codeExample:g,children:(0,s.jsx)(C,{})}),"\n",(0,s.jsx)(n.h3,{id:"sizes",children:"Sizes"}),"\n",(0,s.jsx)(o.A,{codeExample:v,children:(0,s.jsx)(j,{})}),"\n",(0,s.jsx)(n.h3,{id:"radius",children:"Radius"}),"\n",(0,s.jsx)(o.A,{codeExample:y,children:(0,s.jsx)(k,{})}),"\n",(0,s.jsx)(n.h3,{id:"colors",children:"Colors"}),"\n",(0,s.jsx)(o.A,{codeExample:E,children:(0,s.jsx)(A,{})}),"\n",(0,s.jsx)(n.h3,{id:"border-width",children:"Border Width"}),"\n",(0,s.jsx)(o.A,{codeExample:w,children:(0,s.jsx)(S,{})}),"\n",(0,s.jsx)(n.h3,{id:"border-colors",children:"Border Colors"}),"\n",(0,s.jsx)(o.A,{codeExample:N,children:(0,s.jsx)(J,{})}),"\n",(0,s.jsx)(n.h3,{id:"checked-border-colors",children:"Checked Border Colors"}),"\n",(0,s.jsx)(o.A,{codeExample:P,children:(0,s.jsx)(M,{})}),"\n",(0,s.jsx)(n.h3,{id:"disabled",children:"Disabled"}),"\n",(0,s.jsx)(o.A,{codeExample:z,children:(0,s.jsx)(D,{})}),"\n",(0,s.jsx)(n.h3,{id:"background-color",children:"Background Color"}),"\n",(0,s.jsx)(o.A,{codeExample:L,children:(0,s.jsx)(W,{})}),"\n",(0,s.jsx)(n.h3,{id:"checked-background-color",children:"Checked Background Color"}),"\n",(0,s.jsx)(o.A,{codeExample:U,children:(0,s.jsx)(F,{})}),"\n",(0,s.jsx)(n.h3,{id:"label",children:"Label"}),"\n",(0,s.jsx)(o.A,{codeExample:Q,children:(0,s.jsx)(Z,{})}),"\n",(0,s.jsx)(n.h3,{id:"custom-check-element",children:"Custom Check Element"}),"\n",(0,s.jsx)(o.A,{codeExample:se,children:(0,s.jsx)(ee,{})}),"\n",(0,s.jsx)(n.h3,{id:"using-as-radio-button",children:"Using as Radio Button"}),"\n",(0,s.jsx)(o.A,{codeExample:ie,children:(0,s.jsx)(ae,{})}),"\n",(0,s.jsx)(n.h2,{id:"playground",children:"Playground"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live noInline",live:!0,children:"//Play with props to see live changes;\n\nfunction CheckPlayground() {\n  const [value, setValue] = useState(true);\n\n  return (\n    <Check value={value}\n          label='Try check box'\n          type='inverse'\n          size='large'\n          radius='large'\n          color='primary'\n          borderWidth='thick'\n          onValueChange={() => setValue(!value)}\n    />\n  );\n}\n\nrender(<CheckPlayground />);\n"})})]})}function ue(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(ce,{...e})}):ce(e)}},88065:(e,n,t)=>{"use strict";t.d(n,{A:()=>a});var l=t(96540),s=t(74848);const a=class extends l.PureComponent{render(){return(0,s.jsx)("span",{className:"color-view",style:{backgroundColor:this.props.color.toString()}})}}},76449:(e,n,t)=>{"use strict";t.d(n,{A:()=>r});var l=t(96540),s=t(94605),a=t(88065),i=t(74848);const r=class extends l.PureComponent{render(){return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("p",{children:["One of ",(0,i.jsx)("code",{children:"'default' | 'primary' | 'secondary' | 'info' | 'success' | 'warning' | 'error' | 'dark' | 'light' | ColorValue"})]}),(0,i.jsxs)("table",{children:[(0,i.jsxs)("thead",{children:[(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{rowSpan:2,children:"Name"}),(0,i.jsx)("th",{rowSpan:2,children:" Type"}),(0,i.jsx)("th",{rowSpan:2,children:" Value"}),(0,i.jsx)("th",{colSpan:2,children:"Preview"})]}),(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{children:"Light"}),(0,i.jsx)("th",{children:"Dark"})]})]}),(0,i.jsxs)("tbody",{children:[Object.keys(s.light).map(((e,n)=>(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{children:e}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"https://reactnative.dev/docs/colors",target:"_blank",children:"ColorValue"})})}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:`theme.colors.${e}`})}),(0,i.jsxs)("td",{children:[(0,i.jsx)(a.A,{color:s.light[e]})," ",(0,i.jsx)("code",{style:{marginLeft:15},children:s.light[e]})]}),(0,i.jsxs)("td",{children:[(0,i.jsx)(a.A,{color:s.dark[e]})," ",(0,i.jsx)("code",{style:{marginLeft:15},children:s.dark[e]})]})]},n))),(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{}),(0,i.jsx)("td",{children:(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"https://reactnative.dev/docs/colors",target:"_blank",children:"ColorValue"})})}),(0,i.jsxs)("td",{colSpan:3,children:["Any ",(0,i.jsx)("code",{children:(0,i.jsx)("a",{href:"https://reactnative.dev/docs/colors",target:"_blank",children:"ColorValue"})})," chosen by developer."]})]})]})]})]})}}},45424:(e,n,t)=>{"use strict";t.d(n,{A:()=>h});var l=t(96540),s=t(49489),a=t(7227),i=t(39498),r=t(74848);const h=class extends l.PureComponent{render(){return(0,r.jsxs)(s.A,{className:"demo-tabs",children:[(0,r.jsx)(a.A,{value:"preview",label:"Preview",default:!0,children:this.props.children}),(0,r.jsx)(a.A,{value:"code",label:"Code",children:(0,r.jsx)(i.A,{showLineNumbers:!0,language:"jsx",children:this.props.codeExample})})]})}}},35013:(e,n,t)=>{"use strict";t.d(n,{K:()=>s,q:()=>l});const l=13,s="/flexnative/img/logo.svg"},42480:(e,n,t)=>{"use strict";t.d(n,{A:()=>p});var l=t(96540),s=t(35013),a=t(64444),i=t(86884),r=t(32533),h=t(17120),o=t(57388),d=t(58424),c=t(73769),u=t(75117),x=t(44116),m=t(49585);const p={React:l,...l,Avatar:a.Ay,AvatarGroup:a.Z7,Button:i.A,Icon:r.default,Spinner:r.Spinner,BottomSheet:h.A,Tag:o.A,Badge:d.A,SkeletonLoader:c.Ay,Circle:c.jl,Rect:c.rw,TextBox:u.fI,NumericTextBox:u.uI,Check:u.Jl,CheckList:u.Pg,Message:x.A,Block:m.e,LOGO:s.K}},78982:()=>{},47790:()=>{},73776:()=>{},77965:()=>{},66089:()=>{},79368:()=>{},64688:()=>{},51069:()=>{},15340:()=>{},79838:()=>{},63779:()=>{},77199:()=>{}}]);
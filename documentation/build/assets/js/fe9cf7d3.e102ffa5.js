"use strict";(self.webpackChunk_flexnative_framework_docks_3=self.webpackChunk_flexnative_framework_docks_3||[]).push([[8958],{75565:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>u,default:()=>m,frontMatter:()=>p,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"authentication/example","title":"Example","description":"This guide provides an example that demonstrates how to implement authentication and protect routes with Expo Router using @flexnative/authentication.","source":"@site/docs/authentication/example.mdx","sourceDirName":"authentication","slug":"/authentication/example","permalink":"/flexnative/docs/authentication/example","draft":false,"unlisted":false,"editUrl":"https://github.com/RedonAlla/flexnative/edit/main/documentation/docs/authentication/example.mdx","tags":[{"inline":false,"label":"React","permalink":"/flexnative/docs/tags/react","description":"The library for web and native user interfaces."},{"inline":false,"label":"React Native","permalink":"/flexnative/docs/tags/react-native","description":"Create native apps for Android, iOS, and more using React"},{"inline":false,"label":"Expo","permalink":"/flexnative/docs/tags/expo","description":"Create universal native apps with React that run on Android, iOS, and the web. Iterate with confidence."},{"inline":false,"label":"Framework","permalink":"/flexnative/docs/tags/framework","description":"FlexNative is a component library that enables developers to build universal design systems. It is built on top of React Native, allowing you to develop apps for Android, iOS, and the Web."},{"inline":false,"label":"Authentication","permalink":"/flexnative/docs/tags/authentication","description":"A package to implement almost full authentication and protect routes with Expo Router. `@flexnative/authentication` handles user authentication and protecting routes using Expo Router. The package includes React context, custom hooks, type definitions, and utilizes `expo-secure-store` for secure token storage. This integration enhances the security and manageability of authentication processes across the application.\\n"}],"version":"current","lastUpdatedAt":1739664000000,"sidebarPosition":4,"frontMatter":{"title":"Example","sidebar_position":4,"last_update":{"date":"2025-02-16T00:00:00.000Z","author":"Redon Alla"},"tags":["react","react-native","expo","framework","authentication"]},"sidebar":"componentsSidebar","previous":{"title":"setStorageItemAsync","permalink":"/flexnative/docs/authentication/utilities/setStorageItemAsync"},"next":{"title":"Utilities","permalink":"/flexnative/docs/utilities/"}}');var a=n(74848),o=n(28453),s=n(96540);class r extends s.PureComponent{render(){return(0,a.jsxs)("div",{className:"file-item",style:{paddingLeft:(e=this.props.level,1*e+"rem")},children:[(0,a.jsx)("span",{className:this.props.icon}),(0,a.jsx)("span",{className:"name",children:this.props.name}),this.props.separator&&(0,a.jsx)("span",{className:"separator"}),this.props.right]});var e}}class l extends s.PureComponent{render(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("span",{children:this.props.text}),this.props.icon&&(0,a.jsx)("span",{className:this.props.icon})]})}}class c extends s.PureComponent{render(){return(0,a.jsx)("div",{className:"language-bash file-structure",children:this.props.children})}}const p={title:"Example",sidebar_position:4,last_update:{date:new Date("2025-02-16T00:00:00.000Z"),author:"Redon Alla"},tags:["react","react-native","expo","framework","authentication"]},u=void 0,h={},d=[{value:"AuthProvider",id:"authprovider",level:2},{value:"app/_layout.tsx",id:"app_layouttsx",level:2},{value:"app/(app)/_layout.tsx",id:"appapp_layouttsx",level:2},{value:"app/sign-in.tsx",id:"appsign-intsx",level:2},{value:"app/(app)/index.tsx",id:"appappindextsx",level:2}];function x(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["This guide provides an example that demonstrates how to implement authentication and protect routes with Expo Router using ",(0,a.jsx)(t.code,{children:"@flexnative/authentication"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:["This example it is based on ",(0,a.jsx)(t.a,{href:"https://docs.expo.dev/router/reference/authentication/#using-react-context-and-route-groups",children:"Authentication in Expo Router"}),"\nform expo officially documentation by using the technique of ",(0,a.jsx)(t.a,{href:"https://docs.expo.dev/router/reference/authentication/#using-react-context-and-route-groups",children:(0,a.jsx)(t.strong,{children:"Using React Context and Route Groups"})}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:["For a full example in a real case fallow this ",(0,a.jsx)(t.a,{href:"https://github.com/RedonAlla/flexnative/tree/main/flexnative-demo/app/app-demo",children:"repository"}),"."]})}),"\n",(0,a.jsxs)(t.p,{children:["Consider the following project structure that has a ",(0,a.jsx)(t.code,{children:"/sign-in"})," route that is always accessible and a ",(0,a.jsx)(t.code,{children:"(app)"})," group that requires authentication:"]}),"\n",(0,a.jsxs)(c,{children:[(0,a.jsx)(r,{icon:"icon-folder-open",name:"app",level:0}),(0,a.jsx)(r,{icon:"icon-layout",name:"_layout.tsx",level:1}),(0,a.jsx)(r,{icon:"icon-file-code",name:"sign-in.tsx",level:1,separator:!0,right:(0,a.jsx)(l,{text:"Always accessible",icon:"icon-unlock"})}),(0,a.jsx)(r,{icon:"icon-folder-open",name:"(app)",level:1}),(0,a.jsx)(r,{icon:"icon-layout",name:"_layout.tsx",level:2,separator:!0,right:(0,a.jsx)(l,{text:"Protects child routes"})}),(0,a.jsx)(r,{icon:"icon-file-code",name:"index.tsx",level:2,separator:!0,right:(0,a.jsx)(l,{text:"Requires authorization",icon:"icon-lock"})}),(0,a.jsx)(r,{icon:"icon-folder-open",name:"contexts",level:0}),(0,a.jsx)(r,{icon:"icon-file-code",name:"AuthProvider.tsx",level:1})]}),"\n",(0,a.jsx)(t.h2,{id:"authprovider",children:"AuthProvider"}),"\n",(0,a.jsxs)(t.p,{children:["To follow the above example, set up a ",(0,a.jsx)(t.a,{href:"https://react.dev/reference/react/createContext",children:"React Context provider"}),"\nthat can expose an authentication session to the entire app.\nYou can implement your custom authentication session provider or use the one from the example below."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"title='contexts/AuthProvider.tsx'",children:'import React from "react";\nimport { Alert } from "react-native";\nimport * as LocalAuthentication from "expo-local-authentication";\n// highlight-next-line\nimport { AuthContext, useAuthState } from "@flexnative/authentication";\n\n\nconst SESSION_KEY = \'token\';\n\nconst AuthProvider: React.FC<React.PropsWithChildren> = ({ children }) => {\n  const [[isLoading, session], setSession] = useAuthState(SESSION_KEY);\n\n  const handleAuthenticate = async () => {\n    const hasHardware = await LocalAuthentication.hasHardwareAsync();\n\n    if (!hasHardware) {\n      Alert.alert("Error", "No biometric data is enrolled on this device.");\n      return;\n    }\n\n    const enrolled = await LocalAuthentication.isEnrolledAsync();\n\n    if (!enrolled) {\n      Alert.alert("Error", "No biometric data is enrolled on this device.");\n      return;\n    }\n\n    const result = await LocalAuthentication.authenticateAsync({\n      promptMessage: "Authenticate with fingerprint",\n      fallbackLabel: "Use passcode",\n    });\n\n    if (result.success) {\n      // here you can can get the email from SecureStore\n      // and get token from authorization server.\n      setSession(\'SESSION_ID\');\n    } else {\n      Alert.alert("Error", "Authentication failed.");\n    }\n  };\n\n  const handleLogin = async (loginForm: LoginProps) => {\n    // here you can call your authorization server.\n    setSession(token);\n  }\n\n  const handleLogout = async () => {\n    setSession(null);\n  }\n\n  return (\n    // highlight-next-line\n    <AuthContext.Provider value={{\n      state: {\n        session: session!,\n        authenticated: session !== null\n      },\n      onLogin: handleLogin,\n      onLogout: handleLogout,\n      onAuthentication: handleAuthenticate,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n'})}),"\n",(0,a.jsx)(t.h2,{id:"app_layouttsx",children:"app/_layout.tsx"}),"\n",(0,a.jsxs)(t.p,{children:["Use the ",(0,a.jsx)(t.code,{children:"AuthProvider"})," in the root layout to provide the authentication context to the entire app.\nIt's imperative that the ",(0,a.jsx)(t.code,{children:"<Slot />"})," is mounted before any navigation events are triggered.\nOtherwise, a runtime error will be thrown."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"title='app/_layout.tsx'",children:"import { Slot } from 'expo-router';\n// highlight-next-line\nimport AuthProvider from '/contexts/AuthProvider';\n\nexport default function Root() {\n  return (\n    <AuthProvider>\n      <Slot />\n    </AuthProvider>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"appapp_layouttsx",children:"app/(app)/_layout.tsx"}),"\n",(0,a.jsxs)(t.p,{children:["Create a nested ",(0,a.jsx)(t.a,{href:"https://docs.expo.dev/router/layouts/",children:"layout route"})," that checks whether users are authenticated before rendering the child route components.\nThis layout route redirects users to the sign-in screen if they are not authenticated."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"title='app/(app)/_layout.tsx'",children:"import { Redirect, Slot } from 'expo-router';\n// highlight-next-line\nimport { useAuthContext } from '@flexnative/authentication';\n\n\nexport default function AppLayout() {\n  // highlight-next-line\n  const { state } = useAuthContext();\n\n  if (!state.authenticated) {\n    return <Redirect href=\"/login\" />;\n  }\n\n  return (\n    <Slot />\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"appsign-intsx",children:"app/sign-in.tsx"}),"\n",(0,a.jsxs)(t.p,{children:["Create the ",(0,a.jsx)(t.code,{children:"/sign-in"})," screen.\nIt can toggle the authentication using ",(0,a.jsx)(t.code,{children:"onLogin"}),".\nSince this screen is outside the ",(0,a.jsx)(t.code,{children:"(app)"})," group, the group's layout and authentication check do not run when rendering this screen.\nThis lets logged-out users see this screen."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"title='app/sign-in.tsx'",children:"import { router } from 'expo-router';\nimport { Text, View } from 'react-native';\n// highlight-next-line\nconst auth = useAuthContext();\n\nexport default function SignIn() {\n  const { signIn } = useSession();\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text\n        onPress={() => {\n          auth.onLogin(loginForm);\n          // Navigate after signing in. You may want to tweak this to ensure sign-in is\n          // successful before navigating.\n          router.replace('/');\n        }}>\n        Sign In\n      </Text>\n    </View>\n  );\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"appappindextsx",children:"app/(app)/index.tsx"}),"\n",(0,a.jsx)(t.p,{children:"Implement an authenticated screen that lets users sign out."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",metastring:"title='app/(app)/index.tsx'",children:"export default function Index() {\n  // highlight-next-line\n  const { auth } = useAuthContext();\n\n  return (\n    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n      <Text\n        onPress={() => {\n          // The `app/(app)/_layout.tsx` will redirect to the sign-in screen.\n          auth.onLogout();\n        }}>\n        Sign Out\n      </Text>\n    </View>\n  );\n}\n"})})]})}function m(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(x,{...e})}):x(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var i=n(96540);const a={},o=i.createContext(a);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);
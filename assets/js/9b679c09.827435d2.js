"use strict";(self.webpackChunk_flexnative_framework_docks_3=self.webpackChunk_flexnative_framework_docks_3||[]).push([[6634],{37921:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>q,contentTitle:()=>F,default:()=>K,frontMatter:()=>z,metadata:()=>U,toc:()=>$});var l=n(74848),r=n(28453),t=n(85851),s=n(96540),i=n(84199);const h=class extends s.Component{constructor(e){super(e),this.state={valueNumber:[1],valueString:["primary"],valueObject:[{id:1,color:"primary"}]},this.handleValueNumberChange=this.handleValueNumberChange.bind(this),this.handleValueStringChange=this.handleValueStringChange.bind(this),this.handleValueObjectChange=this.handleValueObjectChange.bind(this)}handleValueNumberChange(e){this.setState({valueNumber:e})}handleValueStringChange(e){this.setState({valueString:e})}handleValueObjectChange(e){this.setState({valueObject:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)(i.Pg,{valueField:"id",value:this.state.valueObject,onValueChange:this.handleValueObjectChange,children:[(0,l.jsx)(i.Jl,{value:{id:1,color:"primary"},label:"primary"}),(0,l.jsx)(i.Jl,{value:{id:2,color:"secondary"},label:"secondary"}),(0,l.jsx)(i.Jl,{value:{id:3,color:"info"},label:"info"})]}),(0,l.jsx)("pre",{children:JSON.stringify(this.state.valueObject,null,2)}),(0,l.jsxs)(i.Pg,{value:this.state.valueString,onValueChange:this.handleValueStringChange,children:[(0,l.jsx)(i.Jl,{value:"primary",label:"primary"}),(0,l.jsx)(i.Jl,{value:"secondary",label:"secondary"}),(0,l.jsx)(i.Jl,{value:"info",label:"info"})]}),(0,l.jsx)("pre",{children:JSON.stringify(this.state.valueString,null,2)}),(0,l.jsxs)(i.Pg,{value:this.state.valueNumber,onValueChange:this.handleValueNumberChange,children:[(0,l.jsx)(i.Jl,{value:1,label:"1"}),(0,l.jsx)(i.Jl,{value:2,label:"2"}),(0,l.jsx)(i.Jl,{value:3,label:"3"})]}),(0,l.jsx)("pre",{children:JSON.stringify(this.state.valueNumber,null,2)})]})}},u="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype ItemProps = { id: number, color: string; };\r\n\r\ntype StateType = {\r\n  valueNumber: Array<number>,\r\n  valueString: Array<string>,\r\n  valueObject: Array<ItemProps>,\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      valueNumber: [1],\r\n      valueString: ['primary'],\r\n      valueObject: [{id: 1, color: 'primary'}]\r\n    }\r\n    \r\n    this.handleValueNumberChange = this.handleValueNumberChange.bind(this);\r\n    this.handleValueStringChange = this.handleValueStringChange.bind(this);\r\n    this.handleValueObjectChange = this.handleValueObjectChange.bind(this);\r\n  }\r\n\r\n  public handleValueNumberChange(value: Array<number>) {\r\n    this.setState({valueNumber: value as Array<number>});\r\n  }\r\n\r\n  public handleValueStringChange(selectedItems: Array<string>) {\r\n    this.setState({valueString: selectedItems});\r\n  }\r\n\r\n  public handleValueObjectChange(selectedItems: Array<ItemProps>) {\r\n    this.setState({valueObject: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <CheckList valueField={'id'} value={this.state.valueObject} onValueChange={this.handleValueObjectChange}>\r\n          <Check value={{id: 1, color: 'primary'}} label='primary' />\r\n          <Check value={{id: 2, color: 'secondary'}} label='secondary' />\r\n          <Check value={{id: 3, color: 'info'}} label='info' />\r\n        </CheckList>\r\n\r\n        <pre>\r\n          {JSON.stringify(this.state.valueObject,null,2)}\r\n        </pre>\r\n\r\n        <CheckList value={this.state.valueString} onValueChange={this.handleValueStringChange}>\r\n          <Check value='primary' label='primary' />\r\n          <Check value='secondary' label='secondary' />\r\n          <Check value='info' label='info' />\r\n        </CheckList>\r\n\r\n        <pre>\r\n          {JSON.stringify(this.state.valueString,null,2)}\r\n        </pre>\r\n        \r\n        <CheckList value={this.state.valueNumber} onValueChange={this.handleValueNumberChange}>\r\n          <Check value={1} label='1' />\r\n          <Check value={2} label='2' />\r\n          <Check value={3} label='3' />\r\n        </CheckList>\r\n\r\n        <pre>\r\n          {JSON.stringify(this.state.valueNumber,null,2)}\r\n        </pre>\r\n      </div>\r\n    );\r\n  }\r\n}",d=class extends s.Component{constructor(e){super(e),this.state={values:["primary"]},this.handleValueChange=this.handleValueChange.bind(this)}handleValueChange(e){this.setState({values:e})}render(){return(0,l.jsx)("div",{className:"example-block",children:(0,l.jsxs)(i.Pg,{value:this.state.values,onValueChange:this.handleValueChange,children:[(0,l.jsx)(i.Jl,{value:"primary",size:"small",color:"primary",label:"Check Box 1"}),(0,l.jsx)(i.Jl,{value:"info",size:"default",color:"info",label:"Check Box 2"}),(0,l.jsx)(i.Jl,{value:"warning",size:"medium",color:"warning",label:"Check Box 3"}),(0,l.jsx)(i.Jl,{value:"error",size:"large",color:"error",label:"Check Box 4"})]})})}},c="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  values: Array<string>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      values: ['primary'],\r\n    }\r\n    \r\n    this.handleValueChange = this.handleValueChange.bind(this);\r\n  }\r\n\r\n  public handleValueChange(selectedItems: string | Array<string>) {\r\n    this.setState({values: selectedItems as Array<string>});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block'>\r\n        <CheckList value={this.state.values} onValueChange={this.handleValueChange}>\r\n          <Check value='primary' size='small' color='primary' label='Check Box 1' />\r\n          <Check value='info' size='default' color='info' label='Check Box 2' />\r\n          <Check value='warning' size='medium' color='warning' label='Check Box 3' />\r\n          <Check value='error' size='large' color='error' label='Check Box 4' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}",o=class extends s.Component{constructor(e){super(e),this.state={valueObject:[{id:1,color:"primary"}]},this.handleValueChange=this.handleValueChange.bind(this)}handleValueChange(e){this.setState({valueObject:e})}render(){return(0,l.jsx)("div",{className:"example-block demo-column",children:(0,l.jsxs)(i.Pg,{label:"Value Field",valueField:"id",value:this.state.valueObject,onValueChange:this.handleValueChange,children:[(0,l.jsx)(i.Jl,{value:{id:1,color:"primary"},label:"primary"}),(0,l.jsx)(i.Jl,{value:{id:2,color:"secondary"},label:"secondary"}),(0,l.jsx)(i.Jl,{value:{id:3,color:"info"},label:"info"})]})})}},g="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype ItemProps = { id: number, color: string; };\r\n\r\ntype StateType = {\r\n  valueObject: Array<ItemProps>,\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      valueObject: [{id: 1, color: 'primary'}]\r\n    }\r\n    \r\n    this.handleValueChange = this.handleValueChange.bind(this);\r\n  }\r\n\r\n  public handleValueChange(selectedItems: Array<ItemProps>) {\r\n    this.setState({valueObject: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <CheckList label='Value Field' valueField={'id'} value={this.state.valueObject} onValueChange={this.handleValueChange}>\r\n          <Check value={{id: 1, color: 'primary'}} label='primary' />\r\n          <Check value={{id: 2, color: 'secondary'}} label='secondary' />\r\n          <Check value={{id: 3, color: 'info'}} label='info' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}",b=class extends s.Component{constructor(e){super(e),this.state={singleSelect:{id:1,color:"primary"},multipleSelect:[{id:1,color:"primary"}]},this.handleSingleSelect=this.handleSingleSelect.bind(this),this.handleMultipleSelect=this.handleMultipleSelect.bind(this)}handleSingleSelect(e){this.setState({singleSelect:e})}handleMultipleSelect(e){this.setState({multipleSelect:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)(i.Pg,{multipleSelect:!0,label:"Multi Select (default)",valueField:"id",value:this.state.multipleSelect,onValueChange:this.handleMultipleSelect,children:[(0,l.jsx)(i.Jl,{value:{id:1,color:"primary"},label:"primary"}),(0,l.jsx)(i.Jl,{value:{id:2,color:"secondary"},label:"secondary"}),(0,l.jsx)(i.Jl,{value:{id:3,color:"info"},label:"info"})]}),(0,l.jsx)("pre",{children:JSON.stringify(this.state.multipleSelect,null,2)}),(0,l.jsxs)(i.Pg,{multipleSelect:!1,label:"Single Select",valueField:"id",value:this.state.singleSelect,onValueChange:this.handleSingleSelect,children:[(0,l.jsx)(i.Jl,{value:{id:1,color:"primary"},label:"primary"}),(0,l.jsx)(i.Jl,{value:{id:2,color:"secondary"},label:"secondary"}),(0,l.jsx)(i.Jl,{value:{id:3,color:"info"},label:"info"})]}),(0,l.jsx)("pre",{children:JSON.stringify(this.state.singleSelect,null,2)})]})}},m="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype ItemProps = { id: number, color: string; };\r\n\r\ntype StateType = {\r\n  singleSelect: ItemProps,\r\n  multipleSelect: Array<ItemProps>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      singleSelect: {id: 1, color: 'primary'},\r\n      multipleSelect: [{id: 1, color: 'primary'}]\r\n    }\r\n    \r\n    this.handleSingleSelect = this.handleSingleSelect.bind(this);\r\n    this.handleMultipleSelect = this.handleMultipleSelect.bind(this);\r\n  }\r\n\r\n  public handleSingleSelect(selectedItem: ItemProps) {\r\n    this.setState({singleSelect: selectedItem});\r\n  }\r\n\r\n  public handleMultipleSelect(selectedItems: Array<ItemProps>) {\r\n    this.setState({multipleSelect: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <CheckList multipleSelect={true} label='Multi Select (default)' valueField={'id'} value={this.state.multipleSelect} onValueChange={this.handleMultipleSelect}>\r\n          <Check value={{id: 1, color: 'primary'}} label='primary' />\r\n          <Check value={{id: 2, color: 'secondary'}} label='secondary' />\r\n          <Check value={{id: 3, color: 'info'}} label='info' />\r\n        </CheckList>\r\n\r\n        <pre>\r\n          {JSON.stringify(this.state.multipleSelect, null, 2)}\r\n        </pre>\r\n\r\n        <CheckList multipleSelect={false} label='Single Select' valueField={'id'} value={this.state.singleSelect} onValueChange={this.handleSingleSelect}>\r\n          <Check value={{id: 1, color: 'primary'}} label='primary' />\r\n          <Check value={{id: 2, color: 'secondary'}} label='secondary' />\r\n          <Check value={{id: 3, color: 'info'}} label='info' />\r\n        </CheckList>\r\n\r\n        <pre>\r\n          {JSON.stringify(this.state.singleSelect, null, 2)}\r\n        </pre>\r\n      </div>\r\n    );\r\n  }\r\n}",C=class extends s.Component{constructor(e){super(e),this.state={outlined:["example1"],underlined:["example1"]},this.handleOutlinedChange=this.handleOutlinedChange.bind(this),this.handleUnderlinedChange=this.handleUnderlinedChange.bind(this)}handleOutlinedChange(e){this.setState({outlined:e})}handleUnderlinedChange(e){this.setState({underlined:e})}render(){return(0,l.jsxs)("div",{className:"example-block",children:[(0,l.jsxs)(i.Pg,{type:"outlined",value:this.state.outlined,onValueChange:this.handleOutlinedChange,children:[(0,l.jsx)(i.Jl,{value:"example1",label:"Example 1"}),(0,l.jsx)(i.Jl,{value:"example2",label:"Example 2"}),(0,l.jsx)(i.Jl,{value:"example3",label:"Example 3"})]}),(0,l.jsxs)(i.Pg,{type:"underlined",value:this.state.underlined,onValueChange:this.handleUnderlinedChange,children:[(0,l.jsx)(i.Jl,{value:"example1",label:"Example 1"}),(0,l.jsx)(i.Jl,{value:"example2",label:"Example 2"}),(0,l.jsx)(i.Jl,{value:"example3",label:"Example 3"})]})]})}},v="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateProp = {\r\n  outlined: Array<string>;\r\n  underlined: Array<string>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateProp> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      outlined: ['example1'],\r\n      underlined: ['example1']\r\n    }\r\n    \r\n    this.handleOutlinedChange = this.handleOutlinedChange.bind(this);\r\n    this.handleUnderlinedChange = this.handleUnderlinedChange.bind(this);\r\n  }\r\n\r\n  public handleOutlinedChange(selectedItems: Array<string>) {\r\n    this.setState({outlined: selectedItems});\r\n  }\r\n\r\n  public handleUnderlinedChange(selectedItems: Array<string>) {\r\n    this.setState({underlined: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block'>\r\n        <CheckList type=\"outlined\" value={this.state.outlined} onValueChange={this.handleOutlinedChange}>\r\n          <Check value='example1' label='Example 1' />\r\n          <Check value='example2' label='Example 2' />\r\n          <Check value='example3' label='Example 3' />\r\n        </CheckList>\r\n\r\n        <CheckList type=\"underlined\" value={this.state.underlined} onValueChange={this.handleUnderlinedChange}>\r\n          <Check value='example1' label='Example 1' />\r\n          <Check value='example2' label='Example 2' />\r\n          <Check value='example3' label='Example 3' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}",p=class extends s.Component{constructor(e){super(e),this.state={default:["default"],primary:["primary"],secondary:["secondary"],light:["light"],dark:["dark"],info:["info"],success:["success"],warning:["warning"],error:["error"],crimson:["crimson"],rgb:["rgb"],hex:["hex"],rgba:["rgba"],custom:["custom"]},this.handleDefaultChange=this.handleDefaultChange.bind(this),this.handlePrimaryChange=this.handlePrimaryChange.bind(this),this.handleSecondaryChange=this.handleSecondaryChange.bind(this),this.handelLightChange=this.handelLightChange.bind(this),this.handleInfoChange=this.handleInfoChange.bind(this),this.handleSuccessChange=this.handleSuccessChange.bind(this),this.handleWarningChange=this.handleWarningChange.bind(this),this.handleErrorChange=this.handleErrorChange.bind(this),this.handleCrimsonChange=this.handleCrimsonChange.bind(this),this.handleRgbChange=this.handleRgbChange.bind(this),this.handleRgbaChange=this.handleRgbaChange.bind(this),this.handleHexChange=this.handleHexChange.bind(this),this.handleCustomChange=this.handleCustomChange.bind(this),this.handleDarkChange=this.handleDarkChange.bind(this)}handleDefaultChange(e){this.setState({default:e})}handlePrimaryChange(e){this.setState({primary:e})}handleSecondaryChange(e){this.setState({secondary:e})}handelLightChange(e){this.setState({light:e})}handleDarkChange(e){this.setState({dark:e})}handleInfoChange(e){this.setState({info:e})}handleSuccessChange(e){this.setState({success:e})}handleWarningChange(e){this.setState({warning:e})}handleErrorChange(e){this.setState({error:e})}handleCrimsonChange(e){this.setState({crimson:e})}handleRgbChange(e){this.setState({rgb:e})}handleRgbaChange(e){this.setState({rgba:e})}handleHexChange(e){this.setState({hex:e})}handleCustomChange(e){this.setState({custom:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"default",value:this.state.default,onValueChange:this.handleDefaultChange,children:[(0,l.jsx)(i.Jl,{value:"default",label:"default"}),(0,l.jsx)(i.Jl,{value:"default1",label:"default"}),(0,l.jsx)(i.Jl,{value:"default2",label:"default"})]}),(0,l.jsxs)(i.Pg,{color:"primary",value:this.state.primary,onValueChange:this.handlePrimaryChange,children:[(0,l.jsx)(i.Jl,{value:"primary",label:"primary"}),(0,l.jsx)(i.Jl,{value:"primary1",label:"primary"}),(0,l.jsx)(i.Jl,{value:"primary2",label:"primary"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"secondary",value:this.state.default,onValueChange:this.handleSecondaryChange,children:[(0,l.jsx)(i.Jl,{value:"secondary",label:"secondary"}),(0,l.jsx)(i.Jl,{value:"secondary1",label:"secondary"}),(0,l.jsx)(i.Jl,{value:"secondary2",label:"secondary"})]}),(0,l.jsxs)(i.Pg,{color:"light",value:this.state.default,onValueChange:this.handelLightChange,children:[(0,l.jsx)(i.Jl,{value:"light",label:"light"}),(0,l.jsx)(i.Jl,{value:"light1",label:"light"}),(0,l.jsx)(i.Jl,{value:"light2",label:"light"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"dark",value:this.state.dark,onValueChange:this.handleDarkChange,children:[(0,l.jsx)(i.Jl,{value:"dark",label:"dark"}),(0,l.jsx)(i.Jl,{value:"dark1",label:"dark"}),(0,l.jsx)(i.Jl,{value:"dark2",label:"dark"})]}),(0,l.jsxs)(i.Pg,{color:"info",value:this.state.info,onValueChange:this.handleInfoChange,children:[(0,l.jsx)(i.Jl,{value:"info",label:"info"}),(0,l.jsx)(i.Jl,{value:"info1",label:"info"}),(0,l.jsx)(i.Jl,{value:"info2",label:"info"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"success",value:this.state.success,onValueChange:this.handleSuccessChange,children:[(0,l.jsx)(i.Jl,{value:"success",label:"success"}),(0,l.jsx)(i.Jl,{value:"success1",label:"success"}),(0,l.jsx)(i.Jl,{value:"success2",label:"success"})]}),(0,l.jsxs)(i.Pg,{color:"warning",value:this.state.warning,onValueChange:this.handleWarningChange,children:[(0,l.jsx)(i.Jl,{value:"warning",label:"warning"}),(0,l.jsx)(i.Jl,{value:"warning1",label:"warning"}),(0,l.jsx)(i.Jl,{value:"warning2",label:"warning"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"error",value:this.state.error,onValueChange:this.handleErrorChange,children:[(0,l.jsx)(i.Jl,{value:"error",label:"error"}),(0,l.jsx)(i.Jl,{value:"error1",label:"error"}),(0,l.jsx)(i.Jl,{value:"error2",label:"error"})]}),(0,l.jsxs)(i.Pg,{color:"crimson",value:this.state.crimson,onValueChange:this.handleCrimsonChange,children:[(0,l.jsx)(i.Jl,{value:"crimson",label:"crimson"}),(0,l.jsx)(i.Jl,{value:"crimson1",label:"crimson"}),(0,l.jsx)(i.Jl,{value:"crimson2",label:"crimson"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"#ed143d",value:this.state.hex,onValueChange:this.handleHexChange,children:[(0,l.jsx)(i.Jl,{value:"hex",label:"#ed143d"}),(0,l.jsx)(i.Jl,{value:"hex1",label:"#ed143d"}),(0,l.jsx)(i.Jl,{value:"hex2",label:"#ed143d"})]}),(0,l.jsxs)(i.Pg,{color:"rgba(237, 20, 61, 0.5)",value:this.state.custom,onValueChange:this.handleCustomChange,children:[(0,l.jsx)(i.Jl,{value:"custom",label:"primary",color:"primary"}),(0,l.jsx)(i.Jl,{value:"custom1",label:"info",color:"info"}),(0,l.jsx)(i.Jl,{value:"custom2",label:"success",color:"success"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{color:"rgb(237, 20, 61)",value:this.state.rgb,onValueChange:this.handleRgbChange,children:[(0,l.jsx)(i.Jl,{value:"rgb",label:"rgb(237, 20, 61)"}),(0,l.jsx)(i.Jl,{value:"rgb1",label:"rgb(237, 20, 61)"}),(0,l.jsx)(i.Jl,{value:"rgb2",label:"rgb(237, 20, 61)"})]}),(0,l.jsxs)(i.Pg,{color:"rgba(237, 20, 61, 0.5)",value:this.state.rgba,onValueChange:this.handleRgbaChange,children:[(0,l.jsx)(i.Jl,{value:"rgba",label:"rgba(237, 20, 61, 0.5)"}),(0,l.jsx)(i.Jl,{value:"rgba1",label:"rgba(237, 20, 61, 0.5)"}),(0,l.jsx)(i.Jl,{value:"rgba2",label:"rgba(237, 20, 61, 0.5)"})]})]})]})}},x="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateProp = {\r\n  default: Array<string>;\r\n  primary: Array<string>;\r\n  secondary: Array<string>;\r\n  light: Array<string>;\r\n  dark: Array<string>;\r\n  info: Array<string>;\r\n  success: Array<string>;\r\n  warning: Array<string>;\r\n  error: Array<string>;\r\n  crimson: Array<string>;\r\n  rgb: Array<string>;\r\n  hex: Array<string>;\r\n  rgba: Array<string>;\r\n  custom: Array<string>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateProp> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      default: ['default'],\r\n      primary: ['primary'],\r\n      secondary: ['secondary'],\r\n      light: ['light'],\r\n      dark: ['dark'],\r\n      info: ['info'],\r\n      success: ['success'],\r\n      warning: ['warning'],\r\n      error: ['error'],\r\n      crimson: ['crimson'],\r\n      rgb: ['rgb'],\r\n      hex: ['hex'],\r\n      rgba: ['rgba'],\r\n      custom: ['custom']\r\n    }\r\n    \r\n    this.handleDefaultChange = this.handleDefaultChange.bind(this);\r\n    this.handlePrimaryChange = this.handlePrimaryChange.bind(this);\r\n    this.handleSecondaryChange = this.handleSecondaryChange.bind(this);\r\n    this.handelLightChange = this.handelLightChange.bind(this);\r\n    this.handleInfoChange = this.handleInfoChange.bind(this);\r\n    this.handleSuccessChange = this.handleSuccessChange.bind(this);\r\n    this.handleWarningChange = this.handleWarningChange.bind(this);\r\n    this.handleErrorChange = this.handleErrorChange.bind(this);\r\n    this.handleCrimsonChange = this.handleCrimsonChange.bind(this);\r\n    this.handleRgbChange = this.handleRgbChange.bind(this);\r\n    this.handleRgbaChange = this.handleRgbaChange.bind(this);\r\n    this.handleHexChange = this.handleHexChange.bind(this);\r\n    this.handleCustomChange = this.handleCustomChange.bind(this);\r\n    this.handleDarkChange = this.handleDarkChange.bind(this);\r\n  }\r\n\r\n  public handleDefaultChange(selectedItems: Array<string>): void {\r\n    this.setState({default: selectedItems});\r\n  }\r\n\r\n  public handlePrimaryChange(selectedItems: Array<string>) {\r\n    this.setState({primary: selectedItems});\r\n  }\r\n\r\n  public handleSecondaryChange(selectedItems: Array<string>) {\r\n    this.setState({secondary: selectedItems});\r\n  }\r\n\r\n  public handelLightChange(selectedItems: Array<string>) {\r\n    this.setState({light: selectedItems});\r\n  }\r\n\r\n  public handleDarkChange(selectedItems: Array<string>) {\r\n    this.setState({dark: selectedItems});\r\n  }\r\n\r\n  public handleInfoChange(selectedItems: Array<string>) {\r\n    this.setState({info: selectedItems});\r\n  }\r\n\r\n  public handleSuccessChange(selectedItems: Array<string>) {\r\n    this.setState({success: selectedItems});\r\n  }\r\n\r\n  public handleWarningChange(selectedItems: Array<string>) {\r\n    this.setState({warning: selectedItems});\r\n  }\r\n\r\n  public handleErrorChange(selectedItems: Array<string>) {\r\n    this.setState({error: selectedItems});\r\n  }\r\n\r\n  public handleCrimsonChange(selectedItems: Array<string>) {\r\n    this.setState({crimson: selectedItems});\r\n  }\r\n\r\n  public handleRgbChange(selectedItems: Array<string>) {\r\n    this.setState({rgb: selectedItems});\r\n  }\r\n\r\n  public handleRgbaChange(selectedItems: Array<string>) {\r\n    this.setState({rgba: selectedItems});\r\n  }\r\n\r\n  public handleHexChange(selectedItems: Array<string>) {\r\n    this.setState({hex: selectedItems});\r\n  }\r\n\r\n  public handleCustomChange(selectedItems: Array<string>) {\r\n    this.setState({custom: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <div className='demo-row'>\r\n          <CheckList color=\"default\" value={this.state.default} onValueChange={this.handleDefaultChange}>\r\n            <Check value='default' label='default' />\r\n            <Check value='default1' label='default' />\r\n            <Check value='default2' label='default' />\r\n          </CheckList>\r\n\r\n          <CheckList color=\"primary\" value={this.state.primary} onValueChange={this.handlePrimaryChange}>\r\n            <Check value='primary' label='primary' />\r\n            <Check value='primary1' label='primary' />\r\n            <Check value='primary2' label='primary' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList color=\"secondary\" value={this.state.default} onValueChange={this.handleSecondaryChange}>\r\n            <Check value='secondary' label='secondary' />\r\n            <Check value='secondary1' label='secondary' />\r\n            <Check value='secondary2' label='secondary' />\r\n          </CheckList>\r\n\r\n          <CheckList color=\"light\" value={this.state.default} onValueChange={this.handelLightChange}>\r\n            <Check value='light' label='light' />\r\n            <Check value='light1' label='light' />\r\n            <Check value='light2' label='light' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList color='dark' value={this.state.dark} onValueChange={this.handleDarkChange}>\r\n            <Check value='dark' label='dark' />\r\n            <Check value='dark1' label='dark' />\r\n            <Check value='dark2' label='dark' />\r\n          </CheckList>\r\n          \r\n          <CheckList color='info' value={this.state.info} onValueChange={this.handleInfoChange}>\r\n            <Check value='info' label='info' />\r\n            <Check value='info1' label='info' />\r\n            <Check value='info2' label='info' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList color=\"success\" value={this.state.success} onValueChange={this.handleSuccessChange}>\r\n            <Check value='success' label='success' />\r\n            <Check value='success1' label='success' />\r\n            <Check value='success2' label='success' />\r\n          </CheckList>\r\n          \r\n          <CheckList color=\"warning\" value={this.state.warning} onValueChange={this.handleWarningChange}>\r\n            <Check value='warning' label='warning' />\r\n            <Check value='warning1' label='warning' />\r\n            <Check value='warning2' label='warning' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList color=\"error\" value={this.state.error} onValueChange={this.handleErrorChange}>\r\n            <Check value='error' label='error' />\r\n            <Check value='error1' label='error' />\r\n            <Check value='error2' label='error' />\r\n          </CheckList>\r\n          \r\n          <CheckList color=\"crimson\" value={this.state.crimson} onValueChange={this.handleCrimsonChange}>\r\n            <Check value='crimson' label='crimson' />\r\n            <Check value='crimson1' label='crimson' />\r\n            <Check value='crimson2' label='crimson' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList color=\"#ed143d\" value={this.state.hex} onValueChange={this.handleHexChange}>\r\n            <Check value='hex' label='#ed143d' />\r\n            <Check value='hex1' label='#ed143d' />\r\n            <Check value='hex2' label='#ed143d' />\r\n          </CheckList>\r\n\r\n          <CheckList color=\"rgba(237, 20, 61, 0.5)\" value={this.state.custom} onValueChange={this.handleCustomChange}>\r\n            <Check value='custom' label='primary' color='primary' />\r\n            <Check value='custom1' label='info' color='info' />\r\n            <Check value='custom2' label='success' color='success' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList color=\"rgb(237, 20, 61)\" value={this.state.rgb} onValueChange={this.handleRgbChange}>\r\n            <Check value='rgb' label='rgb(237, 20, 61)' />\r\n            <Check value='rgb1' label='rgb(237, 20, 61)' />\r\n            <Check value='rgb2' label='rgb(237, 20, 61)' />\r\n          </CheckList>\r\n          \r\n          <CheckList color=\"rgba(237, 20, 61, 0.5)\" value={this.state.rgba} onValueChange={this.handleRgbaChange}>\r\n            <Check value='rgba' label='rgba(237, 20, 61, 0.5)' />\r\n            <Check value='rgba1' label='rgba(237, 20, 61, 0.5)' />\r\n            <Check value='rgba2' label='rgba(237, 20, 61, 0.5)' />\r\n          </CheckList>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}",k=class extends s.Component{constructor(e){super(e),this.state={default:["default"],small:["small"],medium:["medium"],large:["large"]},this.handleDefaultChange=this.handleDefaultChange.bind(this),this.handleSmallChange=this.handleSmallChange.bind(this),this.handleMediumChange=this.handleMediumChange.bind(this),this.handelLargeChange=this.handelLargeChange.bind(this)}handleDefaultChange(e){this.setState({default:e})}handleSmallChange(e){this.setState({small:e})}handleMediumChange(e){this.setState({medium:e})}handelLargeChange(e){this.setState({large:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{size:"default",value:this.state.default,onValueChange:this.handleDefaultChange,children:[(0,l.jsx)(i.Jl,{value:"default",label:"default"}),(0,l.jsx)(i.Jl,{value:"default1",label:"default"}),(0,l.jsx)(i.Jl,{value:"default2",label:"default"})]}),(0,l.jsxs)(i.Pg,{size:"small",value:this.state.small,onValueChange:this.handleSmallChange,children:[(0,l.jsx)(i.Jl,{value:"small",label:"small"}),(0,l.jsx)(i.Jl,{value:"small1",label:"small"}),(0,l.jsx)(i.Jl,{value:"small2",label:"small"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{size:"medium",value:this.state.medium,onValueChange:this.handleMediumChange,children:[(0,l.jsx)(i.Jl,{value:"medium",label:"medium"}),(0,l.jsx)(i.Jl,{value:"medium1",label:"medium"}),(0,l.jsx)(i.Jl,{value:"medium2",label:"medium"})]}),(0,l.jsxs)(i.Pg,{size:"large",value:this.state.large,onValueChange:this.handelLargeChange,children:[(0,l.jsx)(i.Jl,{value:"large",label:"large"}),(0,l.jsx)(i.Jl,{value:"large1",label:"large"}),(0,l.jsx)(i.Jl,{value:"large2",label:"large"})]})]})]})}},V="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateProp = {\r\n  default: Array<string>;\r\n  small: Array<string>;\r\n  medium: Array<string>;\r\n  large: Array<string>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateProp> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      default: ['default'],\r\n      small: ['small'],\r\n      medium: ['medium'],\r\n      large: ['large']\r\n    }\r\n    \r\n    this.handleDefaultChange = this.handleDefaultChange.bind(this);\r\n    this.handleSmallChange = this.handleSmallChange.bind(this);\r\n    this.handleMediumChange = this.handleMediumChange.bind(this);\r\n    this.handelLargeChange = this.handelLargeChange.bind(this);\r\n  }\r\n\r\n  public handleDefaultChange(selectedItems: Array<string>): void {\r\n    this.setState({default: selectedItems});\r\n  }\r\n\r\n  public handleSmallChange(selectedItems: Array<string>) {\r\n    this.setState({small: selectedItems});\r\n  }\r\n\r\n  public handleMediumChange(selectedItems: Array<string>) {\r\n    this.setState({medium: selectedItems});\r\n  }\r\n\r\n  public handelLargeChange(selectedItems: Array<string>) {\r\n    this.setState({large: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList size=\"default\" value={this.state.default} onValueChange={this.handleDefaultChange}>\r\n            <Check value='default' label='default' />\r\n            <Check value='default1' label='default' />\r\n            <Check value='default2' label='default' />\r\n          </CheckList>\r\n\r\n          <CheckList size=\"small\" value={this.state.small} onValueChange={this.handleSmallChange}>\r\n            <Check value='small' label='small' />\r\n            <Check value='small1' label='small' />\r\n            <Check value='small2' label='small' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList size=\"medium\" value={this.state.medium} onValueChange={this.handleMediumChange}>\r\n            <Check value='medium' label='medium' />\r\n            <Check value='medium1' label='medium' />\r\n            <Check value='medium2' label='medium' />\r\n          </CheckList>\r\n\r\n          <CheckList size=\"large\" value={this.state.large} onValueChange={this.handelLargeChange}>\r\n            <Check value='large' label='large' />\r\n            <Check value='large1' label='large' />\r\n            <Check value='large2' label='large' />\r\n          </CheckList>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}",y=class extends s.Component{constructor(e){super(e),this.state={valueNumber:[1,3]},this.handleChange=this.handleChange.bind(this)}handleChange(e){this.setState({valueNumber:e})}render(){return(0,l.jsx)("div",{className:"example-block demo-column",children:(0,l.jsxs)(i.Pg,{disabled:!0,value:this.state.valueNumber,onValueChange:this.handleChange,children:[(0,l.jsx)(i.Jl,{value:1,label:"1"}),(0,l.jsx)(i.Jl,{value:2,label:"2"}),(0,l.jsx)(i.Jl,{value:3,label:"3"})]})})}},j="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  valueNumber: Array<number>,\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      valueNumber: [1, 3],\r\n    }\r\n    \r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  public handleChange(value: Array<number>) {\r\n    this.setState({valueNumber: value as Array<number>});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <CheckList disabled value={this.state.valueNumber} onValueChange={this.handleChange}>\r\n          <Check value={1} label='1' />\r\n          <Check value={2} label='2' />\r\n          <Check value={3} label='3' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}",f=class extends s.Component{constructor(e){super(e),this.state={columnValues:[1,3],rowValues:[1,3]},this.handleRowChange=this.handleRowChange.bind(this),this.handleColumnChange=this.handleColumnChange.bind(this)}handleRowChange(e){this.setState({rowValues:e})}handleColumnChange(e){this.setState({columnValues:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)(i.Pg,{direction:"row",value:this.state.rowValues,onValueChange:this.handleRowChange,children:[(0,l.jsx)(i.Jl,{value:1,label:"Row 1"}),(0,l.jsx)(i.Jl,{value:2,label:"Row 2"}),(0,l.jsx)(i.Jl,{value:3,label:"Row 3"})]}),(0,l.jsxs)(i.Pg,{direction:"column",value:this.state.columnValues,onValueChange:this.handleColumnChange,children:[(0,l.jsx)(i.Jl,{value:1,label:"Column 1"}),(0,l.jsx)(i.Jl,{value:2,label:"Column 2"}),(0,l.jsx)(i.Jl,{value:3,label:"Column 3"})]})]})}},S="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  rowValues: Array<number>;\r\n  columnValues: Array<number>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      columnValues: [1, 3],\r\n      rowValues: [1, 3],\r\n    }\r\n    \r\n    this.handleRowChange = this.handleRowChange.bind(this);\r\n    this.handleColumnChange = this.handleColumnChange.bind(this);\r\n  }\r\n\r\n  public handleRowChange(value: Array<number>) {\r\n    this.setState({rowValues: value as Array<number>});\r\n  }\r\n\r\n  public handleColumnChange(value: Array<number>) {\r\n    this.setState({columnValues: value as Array<number>});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <CheckList direction=\"row\" value={this.state.rowValues} onValueChange={this.handleRowChange}>\r\n          <Check value={1} label='Row 1' />\r\n          <Check value={2} label='Row 2' />\r\n          <Check value={3} label='Row 3' />\r\n        </CheckList>\r\n\r\n        <CheckList direction=\"column\" value={this.state.columnValues} onValueChange={this.handleColumnChange}>\r\n          <Check value={1} label='Column 1' />\r\n          <Check value={2} label='Column 2' />\r\n          <Check value={3} label='Column 3' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}",A=class extends s.Component{constructor(e){super(e),this.state={nameValues:["crimson"],rgbValues:["rgb(237, 20, 61)"],hexValues:["#ed143d"],rgbaValues:["rgba(237, 20, 61, 0.5)"]},this.handleNameValueChange=this.handleNameValueChange.bind(this),this.handleRgbValueChange=this.handleRgbValueChange.bind(this),this.handleHexValueChange=this.handleHexValueChange.bind(this),this.handleRgbaValueChange=this.handleRgbaValueChange.bind(this)}handleNameValueChange(e){this.setState({nameValues:e})}handleRgbValueChange(e){this.setState({rgbValues:e})}handleHexValueChange(e){this.setState({hexValues:e})}handleRgbaValueChange(e){this.setState({rgbaValues:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{borderColor:"crimson",value:this.state.nameValues,onValueChange:this.handleNameValueChange,children:[(0,l.jsx)(i.Jl,{value:"crimson",label:"crimson"}),(0,l.jsx)(i.Jl,{value:"blue",label:"blue"}),(0,l.jsx)(i.Jl,{value:"red",label:"red"})]}),(0,l.jsxs)(i.Pg,{borderColor:"#ed143d",value:this.state.hexValues,onValueChange:this.handleHexValueChange,children:[(0,l.jsx)(i.Jl,{value:"#ed143d",label:"#ed143d"}),(0,l.jsx)(i.Jl,{value:"#ce04d1",label:"#ce04d1"}),(0,l.jsx)(i.Jl,{value:"#343deb",label:"#343deb"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{borderColor:"rgba(237, 20, 61, 0.5)",value:this.state.rgbaValues,onValueChange:this.handleRgbaValueChange,children:[(0,l.jsx)(i.Jl,{value:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"}),(0,l.jsx)(i.Jl,{value:"rgba(191, 112, 204, 0.5)",label:"rgba(191, 112, 204, 0.5)"}),(0,l.jsx)(i.Jl,{value:"rgba(40, 61, 158, 0.5)",label:"rgba(40, 61, 158, 0.5)"})]}),(0,l.jsxs)(i.Pg,{borderColor:"rgb(237, 20, 61)",value:this.state.rgbValues,onValueChange:this.handleRgbValueChange,children:[(0,l.jsx)(i.Jl,{value:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,l.jsx)(i.Jl,{value:"rgb(191, 112, 204)",label:"rgb(191, 112, 204)"}),(0,l.jsx)(i.Jl,{value:"rgb(40, 61, 158)",label:"rgb(40, 61, 158)"})]})]})]})}},J="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  nameValues: Array<string>,\r\n  rgbValues: Array<string>,\r\n  hexValues: Array<string>,\r\n  rgbaValues: Array<string>,\r\n}\r\n\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      nameValues: ['crimson'],\r\n      rgbValues: ['rgb(237, 20, 61)'],\r\n      hexValues: ['#ed143d'],\r\n      rgbaValues: ['rgba(237, 20, 61, 0.5)'],\r\n    }\r\n    \r\n    this.handleNameValueChange = this.handleNameValueChange.bind(this);\r\n    this.handleRgbValueChange = this.handleRgbValueChange.bind(this);\r\n    this.handleHexValueChange = this.handleHexValueChange.bind(this);\r\n    this.handleRgbaValueChange = this.handleRgbaValueChange.bind(this);\r\n  }\r\n\r\n  public handleNameValueChange(value: Array<string>) {\r\n    this.setState({nameValues: value as Array<string>});\r\n  }\r\n\r\n  public handleRgbValueChange(value: Array<string>) {\r\n    this.setState({rgbValues: value as Array<string>});\r\n  }\r\n\r\n  public handleHexValueChange(value: Array<string>) {\r\n    this.setState({hexValues: value as Array<string>});\r\n  }\r\n\r\n  public handleRgbaValueChange(value: Array<string>) {\r\n    this.setState({rgbaValues: value as Array<string>});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <div className='demo-row'>\r\n          <CheckList borderColor=\"crimson\" value={this.state.nameValues} onValueChange={this.handleNameValueChange}>\r\n            <Check value='crimson' label='crimson' />\r\n            <Check value='blue' label='blue' />\r\n            <Check value='red' label='red' />\r\n          </CheckList>\r\n\t\t\t\t\t\r\n          <CheckList borderColor=\"#ed143d\" value={this.state.hexValues} onValueChange={this.handleHexValueChange}>\r\n            <Check value='#ed143d' label='#ed143d' />\r\n            <Check value='#ce04d1' label='#ce04d1' />\r\n            <Check value='#343deb' label='#343deb' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList borderColor=\"rgba(237, 20, 61, 0.5)\" value={this.state.rgbaValues} onValueChange={this.handleRgbaValueChange}>\r\n            <Check value='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\r\n            <Check value='rgba(191, 112, 204, 0.5)' label='rgba(191, 112, 204, 0.5)' />\r\n            <Check value='rgba(40, 61, 158, 0.5)' label='rgba(40, 61, 158, 0.5)' />\r\n          </CheckList>\r\n\r\n          <CheckList borderColor=\"rgb(237, 20, 61)\" value={this.state.rgbValues} onValueChange={this.handleRgbValueChange}>\r\n            <Check value='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\r\n            <Check value='rgb(191, 112, 204)' label='rgb(191, 112, 204)' />\r\n            <Check value='rgb(40, 61, 158)' label='rgb(40, 61, 158)' />\r\n          </CheckList>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}",N=class extends s.Component{constructor(e){super(e),this.state={none:["none"],hairline:["hairline"],base:["base"],thin:["thin"],thick:["thick"],number:["number"]},this.handleChangeNone=this.handleChangeNone.bind(this),this.handleChangeHairline=this.handleChangeHairline.bind(this),this.handleChangeBase=this.handleChangeBase.bind(this),this.handleChangeThin=this.handleChangeThin.bind(this),this.handleChangeThick=this.handleChangeThick.bind(this),this.handleChangeNumber=this.handleChangeNumber.bind(this)}handleChangeNone(e){this.setState({none:e})}handleChangeHairline(e){this.setState({hairline:e})}handleChangeBase(e){this.setState({base:e})}handleChangeThin(e){this.setState({thin:e})}handleChangeThick(e){this.setState({thick:e})}handleChangeNumber(e){this.setState({number:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{borderWidth:"none",value:this.state.none,onValueChange:this.handleChangeNone,children:[(0,l.jsx)(i.Jl,{value:"none",label:"none"}),(0,l.jsx)(i.Jl,{value:"none1",label:"none"}),(0,l.jsx)(i.Jl,{value:"none2",label:"none"})]}),(0,l.jsxs)(i.Pg,{borderWidth:"hairline",value:this.state.hairline,onValueChange:this.handleChangeHairline,children:[(0,l.jsx)(i.Jl,{value:"hairline",label:"hairline"}),(0,l.jsx)(i.Jl,{value:"hairline1",label:"hairline"}),(0,l.jsx)(i.Jl,{value:"hairline2",label:"hairline"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{borderWidth:"thin",value:this.state.thin,onValueChange:this.handleChangeThin,children:[(0,l.jsx)(i.Jl,{value:"thin",label:"thin"}),(0,l.jsx)(i.Jl,{value:"thin1",label:"thin"}),(0,l.jsx)(i.Jl,{value:"thin2",label:"thin"})]}),(0,l.jsxs)(i.Pg,{borderWidth:"base",value:this.state.base,onValueChange:this.handleChangeBase,children:[(0,l.jsx)(i.Jl,{value:"base",label:"base"}),(0,l.jsx)(i.Jl,{value:"base1",label:"base"}),(0,l.jsx)(i.Jl,{value:"base2",label:"base"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{borderWidth:"thick",value:this.state.thick,onValueChange:this.handleChangeThick,children:[(0,l.jsx)(i.Jl,{value:"thick",label:"thick"}),(0,l.jsx)(i.Jl,{value:"thick1",label:"thick"}),(0,l.jsx)(i.Jl,{value:"thick2",label:"thick"})]}),(0,l.jsxs)(i.Pg,{borderWidth:3,value:this.state.number,onValueChange:this.handleChangeNumber,children:[(0,l.jsx)(i.Jl,{value:"number",label:"3"}),(0,l.jsx)(i.Jl,{value:"number1",label:"3"}),(0,l.jsx)(i.Jl,{value:"number2",label:"3"})]})]})]})}},L="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  none: Array<string>,\r\n  hairline: Array<string>,\r\n  base: Array<string>,\r\n  thin: Array<string>,\r\n  thick: Array<string>,\r\n  number: Array<string>,\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      none: ['none'],\r\n      hairline: ['hairline'],\r\n      base: ['base'],\r\n      thin: ['thin'],\r\n      thick: ['thick'],\r\n      number: ['number'],\r\n    }\r\n    \r\n    this.handleChangeNone = this.handleChangeNone.bind(this);\r\n    this.handleChangeHairline = this.handleChangeHairline.bind(this);\r\n    this.handleChangeBase = this.handleChangeBase.bind(this);\r\n    this.handleChangeThin = this.handleChangeThin.bind(this);\r\n    this.handleChangeThick = this.handleChangeThick.bind(this);\r\n    this.handleChangeNumber = this.handleChangeNumber.bind(this);\r\n  }\r\n\r\n  public handleChangeNone(selectedItems: Array<string>) {\r\n    this.setState({none: selectedItems});\r\n  }\r\n\r\n  public handleChangeHairline(selectedItems: Array<string>) {\r\n    this.setState({hairline: selectedItems});\r\n  }\r\n\r\n  public handleChangeBase(selectedItems: Array<string>) {\r\n    this.setState({base: selectedItems});\r\n  }\r\n\r\n  public handleChangeThin(selectedItems: Array<string>) {\r\n    this.setState({thin: selectedItems});\r\n  }\r\n\r\n  public handleChangeThick(selectedItems: Array<string>) {\r\n    this.setState({thick: selectedItems});\r\n  }\r\n\r\n  public handleChangeNumber(selectedItems: Array<string>) {\r\n    this.setState({number: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <div className='demo-row'>\r\n          <CheckList borderWidth=\"none\" value={this.state.none} onValueChange={this.handleChangeNone}>\r\n            <Check value='none' label='none' />\r\n            <Check value='none1' label='none' />\r\n            <Check value='none2' label='none' />\r\n          </CheckList>\r\n          \r\n          <CheckList borderWidth=\"hairline\" value={this.state.hairline} onValueChange={this.handleChangeHairline}>\r\n            <Check value='hairline' label='hairline' />\r\n            <Check value='hairline1' label='hairline' />\r\n            <Check value='hairline2' label='hairline' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList borderWidth=\"thin\" value={this.state.thin} onValueChange={this.handleChangeThin}>\r\n            <Check value='thin' label='thin' />\r\n            <Check value='thin1' label='thin' />\r\n            <Check value='thin2' label='thin' />\r\n          </CheckList>\r\n          \r\n          <CheckList borderWidth=\"base\" value={this.state.base} onValueChange={this.handleChangeBase}>\r\n            <Check value='base' label='base' />\r\n            <Check value='base1' label='base' />\r\n            <Check value='base2' label='base' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList borderWidth=\"thick\" value={this.state.thick} onValueChange={this.handleChangeThick}>\r\n            <Check value='thick' label='thick' />\r\n            <Check value='thick1' label='thick' />\r\n            <Check value='thick2' label='thick' />\r\n          </CheckList>\r\n          \r\n          <CheckList borderWidth={3} value={this.state.number} onValueChange={this.handleChangeNumber}>\r\n            <Check value='number' label='3' />\r\n            <Check value='number1' label='3' />\r\n            <Check value='number2' label='3' />\r\n          </CheckList>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}",w=class extends s.Component{constructor(e){super(e),this.state={nameValues:["crimson"],rgbValues:["rgb(237, 20, 61)"],hexValues:["#ed143d"],rgbaValues:["rgba(237, 20, 61, 0.5)"]},this.handleNameValueChange=this.handleNameValueChange.bind(this),this.handleRgbValueChange=this.handleRgbValueChange.bind(this),this.handleHexValueChange=this.handleHexValueChange.bind(this),this.handleRgbaValueChange=this.handleRgbaValueChange.bind(this)}handleNameValueChange(e){this.setState({nameValues:e})}handleRgbValueChange(e){this.setState({rgbValues:e})}handleHexValueChange(e){this.setState({hexValues:e})}handleRgbaValueChange(e){this.setState({rgbaValues:e})}render(){return(0,l.jsxs)("div",{className:"example-block demo-column",children:[(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{backgroundColor:"crimson",value:this.state.nameValues,onValueChange:this.handleNameValueChange,children:[(0,l.jsx)(i.Jl,{value:"crimson",label:"crimson"}),(0,l.jsx)(i.Jl,{value:"blue",label:"blue"}),(0,l.jsx)(i.Jl,{value:"red",label:"red"})]}),(0,l.jsxs)(i.Pg,{backgroundColor:"#ed143d",value:this.state.hexValues,onValueChange:this.handleHexValueChange,children:[(0,l.jsx)(i.Jl,{value:"#ed143d",label:"#ed143d"}),(0,l.jsx)(i.Jl,{value:"#ce04d1",label:"#ce04d1"}),(0,l.jsx)(i.Jl,{value:"#343deb",label:"#343deb"})]})]}),(0,l.jsxs)("div",{className:"demo-row",children:[(0,l.jsxs)(i.Pg,{backgroundColor:"rgb(237, 20, 61)",value:this.state.rgbValues,onValueChange:this.handleRgbValueChange,children:[(0,l.jsx)(i.Jl,{value:"rgb(237, 20, 61)",label:"rgb(237, 20, 61)"}),(0,l.jsx)(i.Jl,{value:"rgb(191, 112, 204)",label:"rgb(191, 112, 204)"}),(0,l.jsx)(i.Jl,{value:"rgb(40, 61, 158)",label:"rgb(40, 61, 158)"})]}),(0,l.jsxs)(i.Pg,{backgroundColor:"rgba(237, 20, 61, 0.5)",value:this.state.rgbaValues,onValueChange:this.handleRgbaValueChange,children:[(0,l.jsx)(i.Jl,{value:"rgba(237, 20, 61, 0.5)",label:"rgba(237, 20, 61, 0.5)"}),(0,l.jsx)(i.Jl,{value:"rgba(191, 112, 204, 0.5)",label:"rgba(191, 112, 204, 0.5)"}),(0,l.jsx)(i.Jl,{value:"rgba(40, 61, 158, 0.5)",label:"rgba(40, 61, 158, 0.5)"})]})]})]})}},I="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  nameValues: Array<string>,\r\n  rgbValues: Array<string>,\r\n  hexValues: Array<string>,\r\n  rgbaValues: Array<string>,\r\n}\r\n\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      nameValues: ['crimson'],\r\n      rgbValues: ['rgb(237, 20, 61)'],\r\n      hexValues: ['#ed143d'],\r\n      rgbaValues: ['rgba(237, 20, 61, 0.5)'],\r\n    }\r\n    \r\n    this.handleNameValueChange = this.handleNameValueChange.bind(this);\r\n    this.handleRgbValueChange = this.handleRgbValueChange.bind(this);\r\n    this.handleHexValueChange = this.handleHexValueChange.bind(this);\r\n    this.handleRgbaValueChange = this.handleRgbaValueChange.bind(this);\r\n  }\r\n\r\n  public handleNameValueChange(value: Array<string>) {\r\n    this.setState({nameValues: value as Array<string>});\r\n  }\r\n\r\n  public handleRgbValueChange(value: Array<string>) {\r\n    this.setState({rgbValues: value as Array<string>});\r\n  }\r\n\r\n  public handleHexValueChange(value: Array<string>) {\r\n    this.setState({hexValues: value as Array<string>});\r\n  }\r\n\r\n  public handleRgbaValueChange(value: Array<string>) {\r\n    this.setState({rgbaValues: value as Array<string>});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-block demo-column'>\r\n        <div className='demo-row'>\r\n          <CheckList backgroundColor=\"crimson\" value={this.state.nameValues} onValueChange={this.handleNameValueChange}>\r\n            <Check value='crimson' label='crimson' />\r\n            <Check value='blue' label='blue' />\r\n            <Check value='red' label='red' />\r\n          </CheckList>\r\n          \r\n          <CheckList backgroundColor=\"#ed143d\" value={this.state.hexValues} onValueChange={this.handleHexValueChange}>\r\n            <Check value='#ed143d' label='#ed143d' />\r\n            <Check value='#ce04d1' label='#ce04d1' />\r\n            <Check value='#343deb' label='#343deb' />\r\n          </CheckList>\r\n        </div>\r\n\r\n        <div className='demo-row'>\r\n          <CheckList backgroundColor=\"rgb(237, 20, 61)\" value={this.state.rgbValues} onValueChange={this.handleRgbValueChange}>\r\n            <Check value='rgb(237, 20, 61)' label='rgb(237, 20, 61)' />\r\n            <Check value='rgb(191, 112, 204)' label='rgb(191, 112, 204)' />\r\n            <Check value='rgb(40, 61, 158)' label='rgb(40, 61, 158)' />\r\n          </CheckList>\r\n\r\n          <CheckList backgroundColor=\"rgba(237, 20, 61, 0.5)\" value={this.state.rgbaValues} onValueChange={this.handleRgbaValueChange}>\r\n            <Check value='rgba(237, 20, 61, 0.5)' label='rgba(237, 20, 61, 0.5)' />\r\n            <Check value='rgba(191, 112, 204, 0.5)' label='rgba(191, 112, 204, 0.5)' />\r\n            <Check value='rgba(40, 61, 158, 0.5)' label='rgba(40, 61, 158, 0.5)' />\r\n          </CheckList>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}",R=class extends s.Component{constructor(e){super(e),this.state={valueNumber:[1,3]},this.handleChange=this.handleChange.bind(this)}handleChange(e){this.setState({valueNumber:e})}render(){return(0,l.jsx)("div",{className:"example-div demo-column",children:(0,l.jsxs)(i.Pg,{helperText:"Example with helper text",value:this.state.valueNumber,onValueChange:this.handleChange,children:[(0,l.jsx)(i.Jl,{value:1,label:"Check 1"}),(0,l.jsx)(i.Jl,{value:2,label:"Check 2"}),(0,l.jsx)(i.Jl,{value:3,label:"Check 3"})]})})}},P="import React from \"react\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\ntype StateType = {\r\n  valueNumber: Array<number>,\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      valueNumber: [1, 3],\r\n    }\r\n    \r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  public handleChange(value: Array<number>) {\r\n    this.setState({valueNumber: value as Array<number>});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-div demo-column'>\r\n        <CheckList helperText=\"Example with helper text\" value={this.state.valueNumber} onValueChange={this.handleChange}>\r\n          <Check value={1} label='Check 1' />\r\n          <Check value={2} label='Check 2' />\r\n          <Check value={3} label='Check 3' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}";var T=n(71582),E=n(32533);const O=class extends s.Component{constructor(e){super(e),this.state={textValues:["1"],customValues:["1"]},this.handleTextValues=this.handleTextValues.bind(this),this.handleCustomValues=this.handleCustomValues.bind(this)}handleTextValues(e){this.setState({textValues:e})}handleCustomValues(e){this.setState({customValues:e})}render(){return(0,l.jsxs)("div",{className:"example-div demo-row",children:[(0,l.jsxs)(i.Pg,{label:"Label as text",value:this.state.textValues,onValueChange:this.handleTextValues,children:[(0,l.jsx)(i.Jl,{value:"1",label:"Check 1"}),(0,l.jsx)(i.Jl,{value:"2",label:"Check 2"}),(0,l.jsx)(i.Jl,{value:"3",label:"Check 3"})]}),(0,l.jsxs)(i.Pg,{label:(0,l.jsx)(D,{}),value:this.state.customValues,onValueChange:this.handleCustomValues,children:[(0,l.jsx)(i.Jl,{value:"1",label:"Check 1"}),(0,l.jsx)(i.Jl,{value:"2",label:"Check 2"}),(0,l.jsx)(i.Jl,{value:"3",label:"Check 3"})]})]})}};function D(){return(0,l.jsxs)(T.EY,{style:H.label,children:[(0,l.jsx)(E.default,{name:"avatar",color:"crimson",onPress:()=>"web"===T.OD.OS?alert("Custom Element as label"):T.Fc.alert("Alert Title","Custom Element as label",[{text:"OK"}])})," Custom Element"]})}const H=T.vv.create({label:{color:"crimson",columnGap:26}}),_="import React from \"react\";\r\nimport { Alert, Platform, StyleSheet, Text } from \"react-native\";\r\nimport Icon from \"@flexnative/icons\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  textValues: Array<string>;\r\n  customValues: Array<string>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      textValues: ['1'],\r\n      customValues: ['1']\r\n    }\r\n    \r\n    this.handleTextValues = this.handleTextValues.bind(this);\r\n    this.handleCustomValues = this.handleCustomValues.bind(this);\r\n  }\r\n\r\n  public handleTextValues(selectedItem: Array<string>) {\r\n    this.setState({textValues: selectedItem});\r\n  }\r\n\r\n  public handleCustomValues(selectedItems: Array<string>) {\r\n    this.setState({customValues: selectedItems});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-div demo-row'>\r\n        <CheckList label='Label as text' value={this.state.textValues} onValueChange={this.handleTextValues}>\r\n          <Check value='1' label='Check 1' />\r\n          <Check value='2' label='Check 2' />\r\n          <Check value='3' label='Check 3' />\r\n        </CheckList>\r\n\r\n        <CheckList label={<Label />} value={this.state.customValues} onValueChange={this.handleCustomValues}>\r\n          <Check value='1' label='Check 1' />\r\n          <Check value='2' label='Check 2' />\r\n          <Check value='3' label='Check 3' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Label() {\r\n  const openAlert = () =>\r\n    Platform.OS === 'web'\r\n      ? alert('Custom Element as label')\r\n      : Alert.alert('Alert Title', 'Custom Element as label', [\r\n          {text: 'OK'},\r\n        ]);\r\n    \r\n  return (\r\n    <Text style={styles.label}>\r\n      <Icon name=\"avatar\" color='crimson' onPress={openAlert} /> Custom Element\r\n    </Text>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    color: 'crimson',\r\n    columnGap: 26,\r\n  }\r\n});",B=class extends s.Component{constructor(e){super(e),this.state={testValues:["1"]},this.handleValuesChange=this.handleValuesChange.bind(this)}handleValuesChange(e){this.setState({testValues:e})}render(){return(0,l.jsx)("div",{className:"example-div",children:(0,l.jsxs)(i.Pg,{label:"Custom Label Style",labelStyle:W.label,value:this.state.testValues,onValueChange:this.handleValuesChange,children:[(0,l.jsx)(i.Jl,{value:"1",label:"Check 1"}),(0,l.jsx)(i.Jl,{value:"2",label:"Check 2"}),(0,l.jsx)(i.Jl,{value:"3",label:"Check 3"})]})})}};const W=T.vv.create({label:{color:"crimson",columnGap:26}}),M="import React from \"react\";\r\nimport { Alert, Platform, StyleSheet, Text } from \"react-native\";\r\nimport Icon from \"@flexnative/icons\";\r\n// highlight-next-line\r\nimport { Check, CheckList } from \"@flexnative/inputs\";\r\n\r\n\r\ntype StateType = {\r\n  testValues: Array<string>;\r\n}\r\n\r\nexport default class extends React.Component<{}, StateType> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      testValues: ['1']\r\n    }\r\n    \r\n    this.handleValuesChange = this.handleValuesChange.bind(this);\r\n  }\r\n\r\n  public handleValuesChange(selectedItem: Array<string>) {\r\n    this.setState({testValues: selectedItem});\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className='example-div'>\r\n        <CheckList label='Custom Label Style'\r\n                  labelStyle={styles.label}\r\n                  value={this.state.testValues}\r\n                  onValueChange={this.handleValuesChange}>\r\n          <Check value='1' label='Check 1' />\r\n          <Check value='2' label='Check 2' />\r\n          <Check value='3' label='Check 3' />\r\n        </CheckList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Label() {\r\n  const openAlert = () =>\r\n    Platform.OS === 'web'\r\n      ? alert('Custom Element as label')\r\n      : Alert.alert('Alert Title', 'Custom Element as label', [\r\n          {text: 'OK'},\r\n        ]);\r\n    \r\n  return (\r\n    <Text style={styles.label}>\r\n      <Icon name=\"avatar\" color='crimson' onPress={openAlert} /> Custom Element\r\n    </Text>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  label: {\r\n    color: 'crimson',\r\n    columnGap: 26,\r\n  }\r\n});",z={title:"Default",sidebar_position:1,sidebar_class_name:"nav_icon check-list-default",last_update:{date:new Date("2024-09-24T00:00:00.000Z"),author:"Redon Alla"},tags:["react","react-native","expo","framework","component"]},F=void 0,U={id:"components/inputs/check-list/default",title:"Default",description:"The following examples demonstrates the FlexNative Check List in action.",source:"@site/docs/components/inputs/check-list/default.mdx",sourceDirName:"components/inputs/check-list",slug:"/components/inputs/check-list/default",permalink:"/flexnative/docs/components/inputs/check-list/default",draft:!1,unlisted:!1,editUrl:"https://github.com/RedonAlla/flexnative/edit/main/docs/components/inputs/check-list/default.mdx",tags:[{inline:!1,label:"React",permalink:"/flexnative/docs/tags/react",description:"The library for web and native user interfaces."},{inline:!1,label:"React Native",permalink:"/flexnative/docs/tags/react-native",description:"Create native apps for Android, iOS, and more using React"},{inline:!1,label:"Expo",permalink:"/flexnative/docs/tags/expo",description:"Create universal native apps with React that run on Android, iOS, and the web. Iterate with confidence."},{inline:!1,label:"Framework",permalink:"/flexnative/docs/tags/framework",description:"FlexNative is a component library that enables developers to build universal design systems. It is built on top of React Native, allowing you to develop apps for Android, iOS, and the Web."},{inline:!1,label:"Component",permalink:"/flexnative/docs/tags/component",description:"Create user interfaces from components."}],version:"current",lastUpdatedAt:1727136e6,sidebarPosition:1,frontMatter:{title:"Default",sidebar_position:1,sidebar_class_name:"nav_icon check-list-default",last_update:{date:"2024-09-24T00:00:00.000Z",author:"Redon Alla"},tags:["react","react-native","expo","framework","component"]},sidebar:"componentsSidebar",previous:{title:"Check List",permalink:"/flexnative/docs/components/inputs/check-list/"},next:{title:"Material",permalink:"/flexnative/docs/components/inputs/check-list/material"}},q={},$=[{value:"Usecase Examples",id:"usecase-examples",level:2},{value:"Value",id:"value",level:3},{value:"Custom Items",id:"custom-items",level:3},{value:"Value Field",id:"value-field",level:3},{value:"Multi Select",id:"multi-select",level:3},{value:"Type",id:"type",level:3},{value:"Colors",id:"colors",level:3},{value:"Sizes",id:"sizes",level:3},{value:"Disabled",id:"disabled",level:3},{value:"Direction",id:"direction",level:3},{value:"Border Colors",id:"border-colors",level:3},{value:"Border Width",id:"border-width",level:3},{value:"Background Colors",id:"background-colors",level:3},{value:"Text Helper",id:"text-helper",level:3},{value:"Label",id:"label",level:3},{value:"Label Style",id:"label-style",level:3},{value:"Playground",id:"playground",level:2}];function G(e){const a={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(a.p,{children:["The following examples demonstrates the ",(0,l.jsx)(a.strong,{children:"FlexNative Check List"})," in action."]}),"\n",(0,l.jsx)(a.h2,{id:"usecase-examples",children:"Usecase Examples"}),"\n",(0,l.jsx)(a.p,{children:"Usecase Examples with default style."}),"\n",(0,l.jsx)(a.h3,{id:"value",children:"Value"}),"\n",(0,l.jsx)(t.A,{codeExample:u,children:(0,l.jsx)(h,{})}),"\n",(0,l.jsx)(a.h3,{id:"custom-items",children:"Custom Items"}),"\n",(0,l.jsx)(t.A,{codeExample:c,children:(0,l.jsx)(d,{})}),"\n",(0,l.jsx)(a.h3,{id:"value-field",children:"Value Field"}),"\n",(0,l.jsx)(t.A,{codeExample:g,children:(0,l.jsx)(o,{})}),"\n",(0,l.jsx)(a.h3,{id:"multi-select",children:"Multi Select"}),"\n",(0,l.jsx)(t.A,{codeExample:m,children:(0,l.jsx)(b,{})}),"\n",(0,l.jsx)(a.h3,{id:"type",children:"Type"}),"\n",(0,l.jsx)(t.A,{codeExample:v,children:(0,l.jsx)(C,{})}),"\n",(0,l.jsx)(a.h3,{id:"colors",children:"Colors"}),"\n",(0,l.jsx)(t.A,{codeExample:x,children:(0,l.jsx)(p,{})}),"\n",(0,l.jsx)(a.h3,{id:"sizes",children:"Sizes"}),"\n",(0,l.jsx)(t.A,{codeExample:V,children:(0,l.jsx)(k,{})}),"\n",(0,l.jsx)(a.h3,{id:"disabled",children:"Disabled"}),"\n",(0,l.jsx)(t.A,{codeExample:j,children:(0,l.jsx)(y,{})}),"\n",(0,l.jsx)(a.h3,{id:"direction",children:"Direction"}),"\n",(0,l.jsx)(t.A,{codeExample:S,children:(0,l.jsx)(f,{})}),"\n",(0,l.jsx)(a.h3,{id:"border-colors",children:"Border Colors"}),"\n",(0,l.jsx)(t.A,{codeExample:J,children:(0,l.jsx)(A,{})}),"\n",(0,l.jsx)(a.h3,{id:"border-width",children:"Border Width"}),"\n",(0,l.jsx)(t.A,{codeExample:L,children:(0,l.jsx)(N,{})}),"\n",(0,l.jsx)(a.h3,{id:"background-colors",children:"Background Colors"}),"\n",(0,l.jsx)(t.A,{codeExample:I,children:(0,l.jsx)(w,{})}),"\n",(0,l.jsx)(a.h3,{id:"text-helper",children:"Text Helper"}),"\n",(0,l.jsx)(t.A,{codeExample:P,children:(0,l.jsx)(R,{})}),"\n",(0,l.jsx)(a.h3,{id:"label",children:"Label"}),"\n",(0,l.jsx)(t.A,{codeExample:_,children:(0,l.jsx)(O,{})}),"\n",(0,l.jsx)(a.h3,{id:"label-style",children:"Label Style"}),"\n",(0,l.jsx)(t.A,{codeExample:M,children:(0,l.jsx)(B,{})}),"\n",(0,l.jsx)(a.h2,{id:"playground",children:"Playground"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-jsx",metastring:"live noInline",live:!0,children:"//Play with props to see live changes;\r\n\r\nfunction CheckListPlayground() {\r\n  const [textValues, setTextValues] = useState(['1', '2', '3']);\r\n\r\n  return (\r\n    <CheckList label='Check list label'\r\n              value={textValues}\r\n              color='success'\r\n              size='large'\r\n              backgroundColor='#ebedf0'\r\n              borderColor='crimson'\r\n              borderWidth='thick'\r\n              radius='medium'\r\n              onValueChange={(newValues) => setTextValues([...newValues])}>\r\n      <Check value='1' label='Check 1' />\r\n      <Check value='2' label='Check 2' />\r\n      <Check value='3' label='Check 3' color='primary' />\r\n    </CheckList>\r\n  );\r\n}\r\n\r\nrender(<CheckListPlayground />);\n"})})]})}function K(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(G,{...e})}):G(e)}},7227:(e,a,n)=>{n.d(a,{A:()=>s});n(96540);var l=n(34164);const r={tabItem:"tabItem_Ymn6"};var t=n(74848);function s(e){let{children:a,hidden:n,className:s}=e;return(0,t.jsx)("div",{role:"tabpanel",className:(0,l.A)(r.tabItem,s),hidden:n,children:a})}},49489:(e,a,n)=>{n.d(a,{A:()=>y});var l=n(96540),r=n(34164),t=n(24245),s=n(56347),i=n(36494),h=n(62814),u=n(45167),d=n(69900);function c(e){return l.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:a}=e;return!!a&&"object"==typeof a&&"value"in a}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function o(e){const{values:a,children:n}=e;return(0,l.useMemo)((()=>{const e=a??function(e){return c(e).map((e=>{let{props:{value:a,label:n,attributes:l,default:r}}=e;return{value:a,label:n,attributes:l,default:r}}))}(n);return function(e){const a=(0,u.XI)(e,((e,a)=>e.value===a.value));if(a.length>0)throw new Error(`Docusaurus error: Duplicate values "${a.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[a,n])}function g(e){let{value:a,tabValues:n}=e;return n.some((e=>e.value===a))}function b(e){let{queryString:a=!1,groupId:n}=e;const r=(0,s.W6)(),t=function(e){let{queryString:a=!1,groupId:n}=e;if("string"==typeof a)return a;if(!1===a)return null;if(!0===a&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:a,groupId:n});return[(0,h.aZ)(t),(0,l.useCallback)((e=>{if(!t)return;const a=new URLSearchParams(r.location.search);a.set(t,e),r.replace({...r.location,search:a.toString()})}),[t,r])]}function m(e){const{defaultValue:a,queryString:n=!1,groupId:r}=e,t=o(e),[s,h]=(0,l.useState)((()=>function(e){let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!g({value:a,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${a}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return a}const l=n.find((e=>e.default))??n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:a,tabValues:t}))),[u,c]=b({queryString:n,groupId:r}),[m,C]=function(e){let{groupId:a}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(a),[r,t]=(0,d.Dv)(n);return[r,(0,l.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:r}),v=(()=>{const e=u??m;return g({value:e,tabValues:t})?e:null})();(0,i.A)((()=>{v&&h(v)}),[v]);return{selectedValue:s,selectValue:(0,l.useCallback)((e=>{if(!g({value:e,tabValues:t}))throw new Error(`Can't select invalid tab value=${e}`);h(e),c(e),C(e)}),[c,C,t]),tabValues:t}}var C=n(11062);const v={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var p=n(74848);function x(e){let{className:a,block:n,selectedValue:l,selectValue:s,tabValues:i}=e;const h=[],{blockElementScrollPositionUntilNextRender:u}=(0,t.a_)(),d=e=>{const a=e.currentTarget,n=h.indexOf(a),r=i[n].value;r!==l&&(u(a),s(r))},c=e=>{let a=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=h.indexOf(e.currentTarget)+1;a=h[n]??h[0];break}case"ArrowLeft":{const n=h.indexOf(e.currentTarget)-1;a=h[n]??h[h.length-1];break}}a?.focus()};return(0,p.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":n},a),children:i.map((e=>{let{value:a,label:n,attributes:t}=e;return(0,p.jsx)("li",{role:"tab",tabIndex:l===a?0:-1,"aria-selected":l===a,ref:e=>h.push(e),onKeyDown:c,onClick:d,...t,className:(0,r.A)("tabs__item",v.tabItem,t?.className,{"tabs__item--active":l===a}),children:n??a},a)}))})}function k(e){let{lazy:a,children:n,selectedValue:t}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(a){const e=s.find((e=>e.props.value===t));return e?(0,l.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,p.jsx)("div",{className:"margin-top--md",children:s.map(((e,a)=>(0,l.cloneElement)(e,{key:a,hidden:e.props.value!==t})))})}function V(e){const a=m(e);return(0,p.jsxs)("div",{className:(0,r.A)("tabs-container",v.tabList),children:[(0,p.jsx)(x,{...a,...e}),(0,p.jsx)(k,{...a,...e})]})}function y(e){const a=(0,C.A)();return(0,p.jsx)(V,{...e,children:c(e.children)},String(a))}},85851:(e,a,n)=>{n.d(a,{A:()=>h});var l=n(96540),r=n(49489),t=n(7227),s=n(33986),i=n(74848);const h=class extends l.PureComponent{render(){return(0,i.jsxs)(r.A,{className:"demo-tabs",children:[(0,i.jsx)(t.A,{value:"preview",label:"Preview",default:!0,children:this.props.children}),(0,i.jsx)(t.A,{value:"code",label:"Code",children:(0,i.jsx)(s.A,{showLineNumbers:!0,language:"jsx",children:this.props.codeExample})})]})}}}}]);